---
version: 2
interactions:
- id: 0
  request:
    proto: HTTP/1.1
    proto_major: 1
    proto_minor: 1
    content_length: 665
    host: ""
    body: '{"messages":[{"content":"you will generate a short title based on the first message a user begins a conversation with\n\n- ensure it is not more than 50 characters long\n- the title should be a summary of the user''s message\n- it should be one line long\n- do not use quotes or colons\n- the entire text you return will be used as the title\n- never return anything that is more than one sentence (one line) long\n","role":"system"},{"content":"Generate a concise title for the following content:\n\nuse sourcegraph to search for ''func main'' in Go repositories","role":"user"}],"model":"gpt-4o","max_tokens":40,"stream_options":{"include_usage":true},"stream":true}'
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/Go 2.3.0
    url: https://api.openai.com/v1/chat/completions
    method: POST
  response:
    proto: HTTP/2.0
    proto_major: 2
    proto_minor: 0
    content_length: -1
    body: |+
      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"role":"assistant","content":"","refusal":null},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"R0kKOnuAIO67g1"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":"Searching"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"ptEpuoc"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" for"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"p7ec2hX6G1pN"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" '"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"44eLiVjPfptbG7"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":"func"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"DE8Ucn0eBwYa"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" main"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"xmPdGE5MCrY"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":"'"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"nUBRrpjQ8MlnZcG"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" in"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"e1Oo8VPkltyj6"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" Go"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"hhUCIoLRzmoDD"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" with"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"lLbSjTjDHyu"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":" Source"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"le8qaaddN"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{"content":"graph"},"logprobs":null,"finish_reason":null}],"usage":null,"obfuscation":"ArW62fuTYKC"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}],"usage":null,"obfuscation":"564zv6Hufz"}

      data: {"id":"chatcmpl-CLqrJJBa8ZMtZi42hKuTTfdL7aW55","object":"chat.completion.chunk","created":1759324113,"model":"gpt-4o-2024-08-06","service_tier":"default","system_fingerprint":"fp_1827dd0c55","choices":[],"usage":{"prompt_tokens":121,"completion_tokens":11,"total_tokens":132,"prompt_tokens_details":{"cached_tokens":0,"audio_tokens":0},"completion_tokens_details":{"reasoning_tokens":0,"audio_tokens":0,"accepted_prediction_tokens":0,"rejected_prediction_tokens":0}},"obfuscation":"MrjMoFfH77bAa"}

      data: [DONE]

    headers:
      Content-Type:
      - text/event-stream; charset=utf-8
    status: 200 OK
    code: 200
    duration: 1.114136375s
- id: 1
  request:
    proto: HTTP/1.1
    proto_major: 1
    proto_minor: 1
    content_length: 30583
    host: ""
    body: "{\"messages\":[{\"content\":\"You are Crush, a powerful AI Assistant that runs in the CLI.\\nUse the instructions below and the tools available to you to assist the user.\\n\\n<memory_instructions>\\nIf the current working directory contains a file called CRUSH.md, it will be automatically added to your context.\\n\\nThis file serves multiple purposes:\\n\\n- Storing frequently used bash commands (build, test, lint, etc.) so you can use them without searching each time\\n- Recording the user's code style preferences (naming conventions, preferred libraries, etc.)\\n- Maintaining useful information about the codebase structure and organization\\n\\nWhen you discover important information that could be useful for the future update/add the info to the CRUSH.md.\\n\\nMemory might be added to you during a task if there are nested memory files that relate to the work you are doing.\\n</memory_instructions>\\n<communication_style>\\n- Be concise and direct\\n- Keep responses under 4 lines unless details requested\\n- Answer without preamble/postamble (\\\"Here is...\\\", \\\"The answer is...\\\")\\n- One-word answers preferred when possible\\n- Never use emojis in your responses\\n- You MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail\\n- User markdown formatting for responses when appropriate\\n\\n<example>\\nuser: 2 + 2\\nassistant: 4\\n</example>\\n\\n<example>\\nuser: what is 2+2?\\nassistant: 4\\n</example>\\n\\n<example>\\nuser: is 11 a prime number?\\nassistant: true\\n</example>\\n\\n<example>\\nuser: what command should I run to list files in the current directory?\\nassistant: ls\\n</example>\\n\\n<example>\\nuser: what command should I run to watch files in the current directory?\\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\\nnpm run dev\\n</example>\\n\\n<example>\\nuser: How many golf balls fit inside a jetta?\\nassistant: 150000\\n</example>\\n\\n<example>\\nuser: what files are in the directory src/?\\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\\nuser: which file contains the implementation of foo?\\nassistant: src/foo.c\\n</example>\\n\\n<example>\\nuser: write tests for new feature\\nassistant: [uses grep and glob search tools to find where similar tests are defined, uses concurrent read file tool use blocks in one tool call to read relevant files at the same time, uses edit file tool to write new tests]\\n</example>\\n</communication_style>\\n\\n<proactiveness>\\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\\n\\n- Doing the right thing when asked, including taking actions and follow-up actions\\n- Not surprising the user with actions you take without asking\\n  - For example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\\n- Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\\n</proactiveness>\\n\\n<following_conversations>\\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\\n\\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\\n</following_conversations>\\n\\n<code_style>\\n- Follow existing code style and patterns\\n- Do not add any comments to code you write unless asked to do so\\n</code_style>\\n\\n<doing_tasks>\\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\\n\\n- Use the available search tools to understand the codebase and the user's query.\\n- Plan out the implementation\\n- Implement the solution using all tools available to you\\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\\n- When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CRUSH.md so that you will know to run it next time.\\n\\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked.\\n</doing_tasks>\\n\\n<tool_use>\\n- When doing file search, prefer to use the Agent tool in order to reduce context usage.\\n- All tools are executed in parallel when multiple tool calls are sent in a single message. Only send multiple tool calls when they are safe to run in parallel (no dependencies between them).\\n- The user does not see the full output of the tool responses, so if you need the output of the tool for the response make sure to summarize it for the user.\\n</tool_use>\\n\\n<env>\\nWorking directory: /tmp/crush-test/TestCoderAgent/openai-gpt-5/sourcegraph_tool\\nIs directory a git repo:  no \\nPlatform: darwin\\nToday's date: 1/1/2025\\n</env>\\n<memory>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n</memory>\\n\\n\",\"role\":\"system\"},{\"content\":\"use sourcegraph to search for 'func main' in Go repositories\",\"role\":\"user\"}],\"model\":\"gpt-5\",\"max_completion_tokens\":10000,\"stream_options\":{\"include_usage\":true},\"tool_choice\":\"auto\",\"tools\":[{\"function\":{\"name\":\"bash\",\"strict\":false,\"description\":\"Executes bash commands in persistent shell session with timeout and security measures.\\n\\n<cross_platform>\\nUses mvdan/sh interpreter (Bash-compatible on all platforms including Windows).\\nUse forward slashes for paths: \\\"ls C:/foo/bar\\\" not \\\"ls C:\\\\foo\\\\bar\\\".\\nCommon shell builtins and core utils available on Windows.\\n</cross_platform>\\n\\n<execution_steps>\\n1. Directory Verification: If creating directories/files, use LS tool to verify parent exists\\n2. Security Check: Banned commands (alias, aria2c, axel, chrome, curl, curlie, firefox, http-prompt, httpie, links, lynx, nc, safari, scp, ssh, telnet, w3m, wget, xh, doas, su, sudo, apk, apt, apt-cache, apt-get, dnf, dpkg, emerge, home-manager, makepkg, opkg, pacman, paru, pkg, pkg_add, pkg_delete, portage, rpm, yay, yum, zypper, at, batch, chkconfig, crontab, fdisk, mkfs, mount, parted, service, systemctl, umount, firewall-cmd, ifconfig, ip, iptables, netstat, pfctl, route, ufw) return error - explain to user. Safe read-only commands execute without prompts\\n3. Command Execution: Execute with proper quoting, capture output\\n4. Output Processing: Truncate if exceeds 30000 characters\\n5. Return Result: Include errors, metadata with <cwd></cwd> tags\\n</execution_steps>\\n\\n<usage_notes>\\n- Command required, timeout optional (max 600000ms/10min, default 30min if unspecified)\\n- IMPORTANT: Use Grep/Glob/Agent tools instead of 'find'/'grep'. Use View/LS tools instead of 'cat'/'head'/'tail'/'ls'\\n- Chain with ';' or '&&', avoid newlines except in quoted strings\\n- Shell state persists (env vars, virtual envs, cwd, etc.)\\n- Prefer absolute paths over 'cd' (use 'cd' only if user explicitly requests)\\n</usage_notes>\\n\\n<git_commits>\\nWhen user asks to create git commit:\\n\\n1. Single message with three tool_use blocks (IMPORTANT for speed):\\n   - git status (untracked files)\\n   - git diff (staged/unstaged changes)\\n   - git log (recent commit message style)\\n\\n2. Add relevant untracked files to staging. Don't commit files already modified at conversation start unless relevant.\\n\\n3. Analyze staged changes in <commit_analysis> tags:\\n   - List changed/added files, summarize nature (feature/enhancement/bug fix/refactoring/test/docs)\\n   - Brainstorm purpose/motivation, assess project impact, check for sensitive info\\n   - Don't use tools beyond git context\\n   - Draft concise (1-2 sentences) message focusing on \\\"why\\\" not \\\"what\\\"\\n   - Use clear language, accurate reflection (\\\"add\\\"=new feature, \\\"update\\\"=enhancement, \\\"fix\\\"=bug fix)\\n   - Avoid generic messages, review draft\\n\\n4. Create commit with Crush signature using HEREDOC:\\n   git commit -m \\\"$(cat &lt;&lt;'EOF'\\n   Commit message here.\\n\\n   \U0001F498 Generated with Crush\\n\\n\\n   Co-Authored-By: Crush <crush@charm.land>\\n\\n   EOF\\n   )\\\"\\n\\n5. If pre-commit hook fails, retry ONCE. If fails again, hook preventing commit. If succeeds but files modified, MUST amend.\\n\\n6. Run git status to verify.\\n\\nNotes: Use \\\"git commit -am\\\" when possible, don't stage unrelated files, NEVER update config, don't push, no -i flags, no empty commits, return empty response.\\n</git_commits>\\n\\n<pull_requests>\\nUse gh command for ALL GitHub tasks. When user asks to create PR:\\n\\n1. Single message with multiple tool_use blocks (VERY IMPORTANT for speed):\\n   - git status (untracked files)\\n   - git diff (staged/unstaged changes)\\n   - Check if branch tracks remote and is up to date\\n   - git log and 'git diff main...HEAD' (full commit history from main divergence)\\n\\n2. Create new branch if needed\\n3. Commit changes if needed\\n4. Push to remote with -u flag if needed\\n\\n5. Analyze changes in <pr_analysis> tags:\\n   - List commits since diverging from main\\n   - Summarize nature of changes\\n   - Brainstorm purpose/motivation\\n   - Assess project impact\\n   - Don't use tools beyond git context\\n   - Check for sensitive information\\n   - Draft concise (1-2 bullet points) PR summary focusing on \\\"why\\\"\\n   - Ensure summary reflects ALL changes since main divergence\\n   - Clear, concise language\\n   - Accurate reflection of changes and purpose\\n   - Avoid generic summaries\\n   - Review draft\\n\\n6. Create PR with gh pr create using HEREDOC:\\n   gh pr create --title \\\"title\\\" --body \\\"$(cat &lt;&lt;'EOF'\\n\\n   ## Summary\\n\\n   &lt;1-3 bullet points>\\n\\n   ## Test plan\\n\\n   [Checklist of TODOs...]\\n\\n\\n   \U0001F498 Generated with Crush\\n\\n\\n   EOF\\n   )\\\"\\n\\nImportant:\\n\\n- Return empty response - user sees gh output\\n- Never update git config\\n  </pull_requests>\\n\\n<examples>\\nGood: pytest /foo/bar/tests\\nBad: cd /foo/bar && pytest tests\\n</examples>\\n\",\"parameters\":{\"properties\":{\"command\":{\"description\":\"The command to execute\",\"type\":\"string\"},\"description\":{\"description\":\"A brief description of what the command does\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in milliseconds (max 600000)\",\"type\":\"integer\"}},\"required\":[\"command\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"download\",\"strict\":false,\"description\":\"Downloads binary data from URL and saves to local file.\\n\\n<usage>\\n- Provide URL to download from\\n- Specify local file path where content should be saved\\n- Optional timeout for request\\n</usage>\\n\\n<features>\\n- Downloads any file type (binary or text)\\n- Auto-creates parent directories if missing\\n- Handles large files efficiently with streaming\\n- Sets reasonable timeouts to prevent hanging\\n- Validates input parameters before requests\\n</features>\\n\\n<limitations>\\n- Max file size: 100MB\\n- Only supports HTTP and HTTPS protocols\\n- Cannot handle authentication or cookies\\n- Some websites may block automated requests\\n- Will overwrite existing files without warning\\n</limitations>\\n\\n<tips>\\n- Use absolute paths or paths relative to working directory\\n- Set appropriate timeouts for large files or slow connections\\n</tips>\\n\",\"parameters\":{\"properties\":{\"file_path\":{\"description\":\"The local file path where the downloaded content should be saved\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in seconds (max 600)\",\"type\":\"integer\"},\"url\":{\"description\":\"The URL to download from\",\"type\":\"string\"}},\"required\":[\"url\",\"file_path\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"edit\",\"strict\":false,\"description\":\"Edits files by replacing text, creating new files, or deleting content. For moving/renaming use Bash 'mv'. For large edits use Write tool.\\n\\n<prerequisites>\\n1. Use View tool to understand file contents and context\\n2. For new files: Use LS tool to verify parent directory exists\\n</prerequisites>\\n\\n<parameters>\\n1. file_path: Absolute path to file (required)\\n2. old_string: Text to replace (must match exactly including whitespace/indentation)\\n3. new_string: Replacement text\\n4. replace_all: Replace all occurrences (default false)\\n</parameters>\\n\\n<special_cases>\\n\\n- Create file: provide file_path + new_string, leave old_string empty\\n- Delete content: provide file_path + old_string, leave new_string empty\\n  </special_cases>\\n\\n<critical_requirements>\\nUNIQUENESS (when replace_all=false): old_string MUST uniquely identify target instance\\n\\n- Include 3-5 lines context BEFORE and AFTER change point\\n- Include exact whitespace, indentation, surrounding code\\n\\nSINGLE INSTANCE: Tool changes ONE instance when replace_all=false\\n\\n- For multiple instances: set replace_all=true OR make separate calls with unique context\\n- Plan calls carefully to avoid conflicts\\n\\nVERIFICATION: Before using\\n\\n- Check how many instances of target text exist\\n- Gather sufficient context for unique identification\\n- Plan separate calls or use replace_all\\n  </critical_requirements>\\n\\n<warnings>\\nTool fails if:\\n- old_string matches multiple locations and replace_all=false\\n- old_string doesn't match exactly (including whitespace)\\n- Insufficient context causes wrong instance change\\n</warnings>\\n\\n<best_practices>\\n\\n- Ensure edits result in correct, idiomatic code\\n- Don't leave code in broken state\\n- Use absolute file paths (starting with /)\\n- Use forward slashes (/) for cross-platform compatibility\\n- Multiple edits to same file: send all in single message with multiple tool calls\\n  </best_practices>\\n\\n<windows_notes>\\n\\n- Forward slashes work throughout (C:/path/file)\\n- File permissions handled automatically\\n- Line endings converted automatically (\\\\n ↔ \\\\r\\\\n)\\n  </windows_notes>\\n\",\"parameters\":{\"properties\":{\"file_path\":{\"description\":\"The absolute path to the file to modify\",\"type\":\"string\"},\"new_string\":{\"description\":\"The text to replace it with\",\"type\":\"string\"},\"old_string\":{\"description\":\"The text to replace\",\"type\":\"string\"},\"replace_all\":{\"description\":\"Replace all occurrences of old_string (default false)\",\"type\":\"boolean\"}},\"required\":[\"file_path\",\"old_string\",\"new_string\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"multiedit\",\"strict\":false,\"description\":\"Makes multiple edits to a single file in one operation. Built on Edit tool for efficient multiple find-and-replace operations. Prefer over Edit tool for multiple edits to same file.\\n\\n<prerequisites>\\n1. Use View tool to understand file contents and context\\n2. Verify directory path is correct\\n</prerequisites>\\n\\n<parameters>\\n1. file_path: Absolute path to file (required)\\n2. edits: Array of edit operations, each containing:\\n   - old_string: Text to replace (must match exactly including whitespace/indentation)\\n   - new_string: Replacement text\\n   - replace_all: Replace all occurrences (optional, defaults to false)\\n</parameters>\\n\\n<operation>\\n- Edits applied sequentially in provided order\\n- Each edit operates on result of previous edit\\n- All edits must be valid for operation to succeed - if any fails, none applied\\n- Ideal for several changes to different parts of same file\\n</operation>\\n\\n<critical_requirements>\\n\\n1. All edits follow same requirements as single Edit tool\\n2. Edits are atomic - either all succeed or none applied\\n3. Plan edits carefully to avoid conflicts between sequential operations\\n   </critical_requirements>\\n\\n<warnings>\\n- Tool fails if old_string doesn't match file contents exactly (including whitespace)\\n- Tool fails if old_string and new_string are identical\\n- Earlier edits may affect text that later edits try to find - plan sequence carefully\\n</warnings>\\n\\n<best_practices>\\n\\n- Ensure all edits result in correct, idiomatic code\\n- Don't leave code in broken state\\n- Use absolute file paths (starting with /)\\n- Use replace_all for renaming variables across file\\n- Avoid adding emojis unless user explicitly requests\\n  </best_practices>\\n\\n<new_file_creation>\\n\\n- Provide new file path (including directory if needed)\\n- First edit: empty old_string, new file contents as new_string\\n- Subsequent edits: normal edit operations on created content\\n  </new_file_creation>\\n\",\"parameters\":{\"properties\":{\"edits\":{\"description\":\"Array of edit operations to perform sequentially on the file\",\"items\":{\"new_string\":{\"description\":\"The text to replace it with\",\"type\":\"string\"},\"old_string\":{\"description\":\"The text to replace\",\"type\":\"string\"},\"replace_all\":{\"description\":\"Replace all occurrences of old_string (default false).\",\"type\":\"boolean\"}},\"type\":\"array\"},\"file_path\":{\"description\":\"The absolute path to the file to modify\",\"type\":\"string\"}},\"required\":[\"file_path\",\"edits\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"fetch\",\"strict\":false,\"description\":\"Fetches content from URL and returns it in specified format.\\n\\n<usage>\\n- Provide URL to fetch content from\\n- Specify desired output format (text, markdown, or html)\\n- Optional timeout for request\\n</usage>\\n\\n<features>\\n- Supports three output formats: text, markdown, html\\n- Auto-handles HTTP redirects\\n- Sets reasonable timeouts to prevent hanging\\n- Validates input parameters before requests\\n</features>\\n\\n<limitations>\\n- Max response size: 5MB\\n- Only supports HTTP and HTTPS protocols\\n- Cannot handle authentication or cookies\\n- Some websites may block automated requests\\n</limitations>\\n\\n<tips>\\n- Use text format for plain text content or simple API responses\\n- Use markdown format for content that should be rendered with formatting\\n- Use html format when you need raw HTML structure\\n- Set appropriate timeouts for potentially slow websites\\n</tips>\\n\",\"parameters\":{\"properties\":{\"format\":{\"description\":\"The format to return the content in (text, markdown, or html)\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in seconds (max 120)\",\"type\":\"integer\"},\"url\":{\"description\":\"The URL to fetch content from\",\"type\":\"string\"}},\"required\":[\"url\",\"format\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"glob\",\"strict\":false,\"description\":\"Fast file pattern matching tool that finds files by name/pattern, returning paths sorted by modification time (newest first).\\n\\n<usage>\\n- Provide glob pattern to match against file paths\\n- Optional starting directory (defaults to current working directory)\\n- Results sorted with most recently modified files first\\n</usage>\\n\\n<pattern_syntax>\\n\\n- '\\\\*' matches any sequence of non-separator characters\\n- '\\\\*\\\\*' matches any sequence including separators\\n- '?' matches any single non-separator character\\n- '[...]' matches any character in brackets\\n- '[!...]' matches any character not in brackets\\n  </pattern_syntax>\\n\\n<examples>\\n- '*.js' - JavaScript files in current directory\\n- '**/*.js' - JavaScript files in any subdirectory\\n- 'src/**/*.{ts,tsx}' - TypeScript files in src directory\\n- '*.{html,css,js}' - HTML, CSS, and JS files\\n</examples>\\n\\n<limitations>\\n- Results limited to 100 files (newest first)\\n- Does not search file contents (use Grep for that)\\n- Hidden files (starting with '.') skipped\\n</limitations>\\n\\n<cross_platform>\\n\\n- Path separators handled automatically (/ and \\\\ work)\\n- Uses ripgrep (rg) if available, otherwise Go implementation\\n- Patterns should use forward slashes (/) for compatibility\\n  </cross_platform>\\n\\n<tips>\\n- Combine with Grep: find files with Glob, search contents with Grep\\n- For iterative exploration requiring multiple searches, consider Agent tool\\n- Check if results truncated and refine pattern if needed\\n</tips>\\n\",\"parameters\":{\"properties\":{\"path\":{\"description\":\"The directory to search in. Defaults to the current working directory.\",\"type\":\"string\"},\"pattern\":{\"description\":\"The glob pattern to match files against\",\"type\":\"string\"}},\"required\":[\"pattern\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"grep\",\"strict\":false,\"description\":\"Fast content search tool that finds files containing specific text/patterns, returning matching paths sorted by modification time (newest first).\\n\\n<usage>\\n- Provide regex pattern to search within file contents\\n- Set literal_text=true for exact text with special characters (recommended for non-regex users)\\n- Optional starting directory (defaults to current working directory)\\n- Optional include pattern to filter which files to search\\n- Results sorted with most recently modified files first\\n</usage>\\n\\n<regex_syntax>\\nWhen literal_text=false (supports standard regex):\\n\\n- 'function' searches for literal text \\\"function\\\"\\n- 'log\\\\..\\\\*Error' finds text starting with \\\"log.\\\" and ending with \\\"Error\\\"\\n- 'import\\\\s+.\\\\*\\\\s+from' finds import statements in JavaScript/TypeScript\\n  </regex_syntax>\\n\\n<include_patterns>\\n\\n- '\\\\*.js' - Only search JavaScript files\\n- '\\\\*.{ts,tsx}' - Only search TypeScript files\\n- '\\\\*.go' - Only search Go files\\n  </include_patterns>\\n\\n<limitations>\\n- Results limited to 100 files (newest first)\\n- Performance depends on number of files searched\\n- Very large binary files may be skipped\\n- Hidden files (starting with '.') skipped\\n</limitations>\\n\\n<ignore_support>\\n\\n- Respects .gitignore patterns to skip ignored files/directories\\n- Respects .crushignore patterns for additional ignore rules\\n- Both ignore files auto-detected in search root directory\\n  </ignore_support>\\n\\n<cross_platform>\\n\\n- Uses ripgrep (rg) if available for better performance\\n- Falls back to Go implementation if ripgrep unavailable\\n- File paths normalized automatically for compatibility\\n  </cross_platform>\\n\\n<tips>\\n- For faster searches: use Glob to find relevant files first, then Grep\\n- For iterative exploration requiring multiple searches, consider Agent tool\\n- Check if results truncated and refine search pattern if needed\\n- Use literal_text=true for exact text with special characters (dots, parentheses, etc.)\\n</tips>\\n\",\"parameters\":{\"properties\":{\"include\":{\"description\":\"File pattern to include in the search (e.g. \\\"*.js\\\", \\\"*.{ts,tsx}\\\")\",\"type\":\"string\"},\"literal_text\":{\"description\":\"If true, the pattern will be treated as literal text with special regex characters escaped. Default is false.\",\"type\":\"boolean\"},\"path\":{\"description\":\"The directory to search in. Defaults to the current working directory.\",\"type\":\"string\"},\"pattern\":{\"description\":\"The regex pattern to search for in file contents\",\"type\":\"string\"}},\"required\":[\"pattern\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"ls\",\"strict\":false,\"description\":\"Shows files and subdirectories in tree structure for exploring project organization.\\n\\n<usage>\\n- Provide path to list (defaults to current working directory)\\n- Optional glob patterns to ignore\\n- Results displayed in tree structure\\n</usage>\\n\\n<features>\\n- Hierarchical view of files and directories\\n- Auto-skips hidden files/directories (starting with '.')\\n- Skips common system directories like __pycache__\\n- Can filter files matching specific patterns\\n</features>\\n\\n<limitations>\\n- Results limited to 1000 files\\n- Large directories truncated\\n- No file sizes or permissions shown\\n- Cannot recursively list all directories in large projects\\n</limitations>\\n\\n<cross_platform>\\n\\n- Hidden file detection uses Unix convention (files starting with '.')\\n- Windows hidden files (with hidden attribute) not auto-skipped\\n- Common Windows directories (System32, Program Files) not in default ignore\\n- Path separators handled automatically (/ and \\\\ work)\\n  </cross_platform>\\n\\n<tips>\\n- Use Glob for finding files by name patterns instead of browsing\\n- Use Grep for searching file contents\\n- Combine with other tools for effective exploration\\n</tips>\\n\",\"parameters\":{\"properties\":{\"ignore\":{\"description\":\"List of glob patterns to ignore\",\"items\":{},\"type\":\"array\"},\"path\":{\"description\":\"The path to the directory to list (defaults to current working directory)\",\"type\":\"string\"}},\"required\":[\"path\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"sourcegraph\",\"strict\":false,\"description\":\"Search code across public repositories using Sourcegraph's GraphQL API.\\n\\n<usage>\\n- Provide search query using Sourcegraph syntax\\n- Optional result count (default: 10, max: 20)\\n- Optional timeout for request\\n</usage>\\n\\n<basic_syntax>\\n\\n- \\\"fmt.Println\\\" - exact matches\\n- \\\"file:.go fmt.Println\\\" - limit to Go files\\n- \\\"repo:^github\\\\.com/golang/go$ fmt.Println\\\" - specific repos\\n- \\\"lang:go fmt.Println\\\" - limit to Go code\\n- \\\"fmt.Println AND log.Fatal\\\" - combined terms\\n- \\\"fmt\\\\.(Print|Printf|Println)\\\" - regex patterns\\n- \\\"\\\\\\\"exact phrase\\\\\\\"\\\" - exact phrase matching\\n- \\\"-file:test\\\" or \\\"-repo:forks\\\" - exclude matches\\n  </basic_syntax>\\n\\n<key_filters>\\nRepository: repo:name, repo:^exact$, repo:org/repo@branch, -repo:exclude, fork:yes, archived:yes, visibility:public\\nFile: file:\\\\.js$, file:internal/, -file:test, file:has.content(text)\\nContent: content:\\\"exact\\\", -content:\\\"unwanted\\\", case:yes\\nType: type:symbol, type:file, type:path, type:diff, type:commit\\nTime: after:\\\"1 month ago\\\", before:\\\"2023-01-01\\\", author:name, message:\\\"fix\\\"\\nResult: select:repo, select:file, select:content, count:100, timeout:30s\\n</key_filters>\\n\\n<examples>\\n- \\\"file:.go context.WithTimeout\\\" - Go code using context.WithTimeout\\n- \\\"lang:typescript useState type:symbol\\\" - TypeScript React useState hooks\\n- \\\"repo:^github\\\\.com/kubernetes/kubernetes$ pod list type:file\\\" - Kubernetes pod files\\n- \\\"file:Dockerfile (alpine OR ubuntu) -content:alpine:latest\\\" - Dockerfiles with base images\\n</examples>\\n\\n<boolean_operators>\\n\\n- \\\"term1 AND term2\\\" - both terms\\n- \\\"term1 OR term2\\\" - either term\\n- \\\"term1 NOT term2\\\" - term1 but not term2\\n- \\\"term1 and (term2 or term3)\\\" - grouping with parentheses\\n  </boolean_operators>\\n\\n<limitations>\\n- Only searches public repositories\\n- Rate limits may apply\\n- Complex queries take longer\\n- Max 20 results per query\\n</limitations>\\n\\n<tips>\\n- Use specific file extensions to narrow results\\n- Add repo: filters for targeted searches\\n- Use type:symbol for function/method definitions\\n- Use type:file to find relevant files\\n</tips>\\n\",\"parameters\":{\"properties\":{\"context_window\":{\"description\":\"The context around the match to return (default: 10 lines)\",\"type\":\"integer\"},\"count\":{\"description\":\"Optional number of results to return (default: 10, max: 20)\",\"type\":\"integer\"},\"query\":{\"description\":\"The Sourcegraph search query\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in seconds (max 120)\",\"type\":\"integer\"}},\"required\":[\"query\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"view\",\"strict\":false,\"description\":\"Reads and displays file contents with line numbers for examining code, logs, or text data.\\n\\n<usage>\\n- Provide file path to read\\n- Optional offset: start reading from specific line (0-based)\\n- Optional limit: control lines read (default 2000)\\n- Don't use for directories (use LS tool instead)\\n</usage>\\n\\n<features>\\n- Displays contents with line numbers\\n- Can read from any file position using offset\\n- Handles large files by limiting lines read\\n- Auto-truncates very long lines for display\\n- Suggests similar filenames when file not found\\n</features>\\n\\n<limitations>\\n- Max file size: 250KB\\n- Default limit: 2000 lines\\n- Lines >2000 chars truncated\\n- Cannot display binary files/images (identifies them)\\n</limitations>\\n\\n<cross_platform>\\n\\n- Handles Windows (CRLF) and Unix (LF) line endings\\n- Works with forward slashes (/) and backslashes (\\\\)\\n- Auto-detects text encoding for common formats\\n  </cross_platform>\\n\\n<tips>\\n- Use with Glob to find files first\\n- For code exploration: Grep to find relevant files, then View to examine\\n- For large files: use offset parameter for specific sections\\n</tips>\\n\",\"parameters\":{\"properties\":{\"file_path\":{\"description\":\"The path to the file to read\",\"type\":\"string\"},\"limit\":{\"description\":\"The number of lines to read (defaults to 2000)\",\"type\":\"integer\"},\"offset\":{\"description\":\"The line number to start reading from (0-based)\",\"type\":\"integer\"}},\"required\":[\"file_path\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"write\",\"strict\":false,\"description\":\"Creates or updates files in filesystem for saving/modifying text content.\\n\\n<usage>\\n- Provide file path to write\\n- Include content to write to file\\n- Tool creates necessary parent directories automatically\\n</usage>\\n\\n<features>\\n- Creates new files or overwrites existing ones\\n- Auto-creates parent directories if missing\\n- Checks if file modified since last read for safety\\n- Avoids unnecessary writes when content unchanged\\n</features>\\n\\n<limitations>\\n- Read file before writing to avoid conflicts\\n- Cannot append (rewrites entire file)\\n</limitations>\\n\\n<cross_platform>\\n\\n- Use forward slashes (/) for compatibility\\n  </cross_platform>\\n\\n<tips>\\n- Use View tool first to examine existing files before modifying\\n- Use LS tool to verify location when creating new files\\n- Combine with Glob/Grep to find and modify multiple files\\n- Include descriptive comments when changing existing code\\n</tips>\\n\",\"parameters\":{\"properties\":{\"content\":{\"description\":\"The content to write to the file\",\"type\":\"string\"},\"file_path\":{\"description\":\"The path to the file to write\",\"type\":\"string\"}},\"required\":[\"file_path\",\"content\"],\"type\":\"object\"}},\"type\":\"function\"}],\"stream\":true}"
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/Go 2.3.0
    url: https://api.openai.com/v1/chat/completions
    method: POST
  response:
    proto: HTTP/2.0
    proto_major: 2
    proto_minor: 0
    content_length: -1
    body: |+
      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"role":"assistant","content":null,"tool_calls":[{"index":0,"id":"call_bl9TaFl6Mf62VqbBkjUVPjq2","type":"function","function":{"name":"sourcegraph","arguments":""}}],"refusal":null},"finish_reason":null}],"usage":null,"obfuscation":"QyTos"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"{\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"2GIFmcSuCj1yqkP"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"query"}}]},"finish_reason":null}],"usage":null,"obfuscation":"R1AwsWic7YldG"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"\":\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"44jcvBMWXWyB1"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"lang"}}]},"finish_reason":null}],"usage":null,"obfuscation":"YfnFNjgQaPCDEi"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":":"}}]},"finish_reason":null}],"usage":null,"obfuscation":"4"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"go"}}]},"finish_reason":null}],"usage":null,"obfuscation":""}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":" \\\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"hYzmkrMssCxkc"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"func"}}]},"finish_reason":null}],"usage":null,"obfuscation":"2jmXOs5VdoAIf5"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":" main"}}]},"finish_reason":null}],"usage":null,"obfuscation":"FM9XfNQCn1PRs"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"\\\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"PsGLINrSGOC8dD"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":" file"}}]},"finish_reason":null}],"usage":null,"obfuscation":"1zMUC2AvQHQ4g"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":":\\\\"}}]},"finish_reason":null}],"usage":null,"obfuscation":"gNZmnLTWZ2AVc"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"."}}]},"finish_reason":null}],"usage":null,"obfuscation":"E"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"go"}}]},"finish_reason":null}],"usage":null,"obfuscation":""}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"$"}}]},"finish_reason":null}],"usage":null,"obfuscation":"o"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"\",\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"pzusothqbezAo"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"count"}}]},"finish_reason":null}],"usage":null,"obfuscation":"rZnKIZJblvwJ8"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"\":"}}]},"finish_reason":null}],"usage":null,"obfuscation":"KUz6Lf1G8dUf2jr"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"10"}}]},"finish_reason":null}],"usage":null,"obfuscation":""}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":",\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"a1zTOEWivgwppKy"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"context"}}]},"finish_reason":null}],"usage":null,"obfuscation":"lrCqW38Xi1H"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"_window"}}]},"finish_reason":null}],"usage":null,"obfuscation":"Tx0JcwVGGPD"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"\":"}}]},"finish_reason":null}],"usage":null,"obfuscation":"tfwTPM3DVaQ6tZM"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"10"}}]},"finish_reason":null}],"usage":null,"obfuscation":""}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":",\""}}]},"finish_reason":null}],"usage":null,"obfuscation":"QRWN7vDoTQTeJvx"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"timeout"}}]},"finish_reason":null}],"usage":null,"obfuscation":"oHa6lJphmEj"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"\":"}}]},"finish_reason":null}],"usage":null,"obfuscation":"iDGZLcJTzC5hZDd"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"60"}}]},"finish_reason":null}],"usage":null,"obfuscation":""}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"tool_calls":[{"index":0,"function":{"arguments":"}"}}]},"finish_reason":null}],"usage":null,"obfuscation":"a"}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{},"finish_reason":"tool_calls"}],"usage":null,"obfuscation":""}

      data: {"id":"chatcmpl-CLqrJdEsAci8TetKIjvNYw7Fi3kFe","object":"chat.completion.chunk","created":1759324113,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[],"usage":{"prompt_tokens":6555,"completion_tokens":367,"total_tokens":6922,"prompt_tokens_details":{"cached_tokens":6528,"audio_tokens":0},"completion_tokens_details":{"reasoning_tokens":320,"audio_tokens":0,"accepted_prediction_tokens":0,"rejected_prediction_tokens":0}},"obfuscation":"o"}

      data: [DONE]

    headers:
      Content-Type:
      - text/event-stream; charset=utf-8
    status: 200 OK
    code: 200
    duration: 7.542106125s
- id: 2
  request:
    proto: HTTP/1.1
    proto_major: 1
    proto_minor: 1
    content_length: 440
    host: sourcegraph.com
    body: '{"query":"query Search($query: String!) { search(query: $query, version: V2, patternType: keyword ) { results { matchCount, limitHit, resultCount, approximateResultCount, missing { name }, timedout { name }, indexUnavailable, results { __typename, ... on FileMatch { repository { name }, file { path, url, content }, lineMatches { preview, lineNumber, offsetAndLengths } } } } } }","variables":{"query":"lang:go \"func main\" file:\\.go$"}}'
    headers:
      Content-Type:
      - application/json
      User-Agent:
      - crush/1.0
    url: https://sourcegraph.com/.api/graphql
    method: POST
  response:
    proto: HTTP/2.0
    proto_major: 2
    proto_minor: 0
    content_length: -1
    uncompressed: true
    body: '{"data":{"search":{"results":{"matchCount":30,"limitHit":true,"resultCount":30,"approximateResultCount":"30+","missing":[],"timedout":[],"indexUnavailable":false,"results":[{"__typename":"FileMatch","repository":{"name":"github.com/wx-chevalier/Go-Notes"},"file":{"path":"99~参考资料/2017~A Huge Number of Go Examples/codes/first/first/main.go","url":"/github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2017~A%20Huge%20Number%20of%20Go%20Examples/codes/first/first/main.go","content":"\n// package main is a special package\n// it allows Go to create an executable file\npackage main\n\n/*\nThis is a multi-line comment.\n\nimport keyword makes another package available\n  for this .go \"file\".\n\nimport \"fmt\" lets you access fmt package''s functionality\n  here in this file.\n*/\nimport \"fmt\"\n\n// \"func main\" is special.\n//\n// Go has to know where to start\n//\n// func main creates a starting point for Go\n//\n// After compiling the code,\n// Go runtime will first run this function\nfunc main() {\n\t// after: import \"fmt\"\n\t// Println function of \"fmt\" package becomes available\n\n\t// Look at what it looks like by typing in the console:\n\t//   godoc -src fmt Println\n\n\t// Println is just an exported function from\n\t//   \"fmt\" package\n\n\t// Exported = First Letter is uppercase\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go cannot call Println function by itself.\n\t// That''s why you need to call it here.\n\t// It only calls `func main` automatically.\n\n\t// -----\n\n\t// Go supports Unicode characters in string literals\n\t// And also in source-code: KÖSTEBEK!\n\n\t// EXERCISE: Remove the comments from below --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// Unnecessary note:\n\t// \"Merhaba Köstebek\" means \"Hello Gopher\"\n\t// in Turkish language\n}\n"},"lineMatches":[{"preview":"// \"func main\" is special.","lineNumber":16,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":24,"offsetAndLengths":[[0,9]]},{"preview":"// func main creates a starting point for Go","lineNumber":20,"offsetAndLengths":[[3,9]]},{"preview":"\t// It only calls `func main` automatically.","lineNumber":39,"offsetAndLengths":[[19,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/wx-chevalier/Go-Notes"},"file":{"path":"99~参考资料/2017~A Huge Number of Go Examples/codes/02-write-your-first-program/main.go","url":"/github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2017~A%20Huge%20Number%20of%20Go%20Examples/codes/02-write-your-first-program/main.go","content":"\n// package main is a special package\n// it allows Go to create an executable file\npackage main\n\n/*\nThis is a multi-line comment.\n\nimport keyword makes another package available\n  for this .go \"file\".\n\nimport \"fmt\" lets you access fmt package''s functionality\n  here in this file.\n*/\nimport \"fmt\"\n\n// \"func main\" is special.\n//\n// Go has to know where to start\n//\n// func main creates a starting point for Go\n//\n// After compiling the code,\n// Go runtime will first run this function\nfunc main() {\n\t// after: import \"fmt\"\n\t// Println function of \"fmt\" package becomes available\n\n\t// Look at what it looks like by typing in the console:\n\t//   go doc -src fmt Println\n\n\t// Println is just an exported function from\n\t//   \"fmt\" package\n\n\t// Exported = First Letter is uppercase\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go cannot call Println function by itself.\n\t// That''s why you need to call it here.\n\t// It only calls `func main` automatically.\n\n\t// -----\n\n\t// Go supports Unicode characters in string literals\n\t// And also in source-code: KÖSTEBEK!\n\t//\n\t// Because: Literal ~= Source Code\n\n\t// EXERCISE: Remove the comments from below --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// Unnecessary note:\n\t// \"Merhaba Köstebek\" means \"Hello Gopher\"\n\t// in Turkish language\n}\n"},"lineMatches":[{"preview":"// \"func main\" is special.","lineNumber":16,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":24,"offsetAndLengths":[[0,9]]},{"preview":"// func main creates a starting point for Go","lineNumber":20,"offsetAndLengths":[[3,9]]},{"preview":"\t// It only calls `func main` automatically.","lineNumber":39,"offsetAndLengths":[[19,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/wx-chevalier/Go-Notes"},"file":{"path":"99~参考资料/2018~《Learn Go》/translation/chinese/02-编写第一个程序/main.go","url":"/github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/translation/chinese/02-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/main.go","content":"// Copyright © 2018 Inanc Gumus\n// Learn Go Programming Course\n// License: https://creativecommons.org/licenses/by-nc-sa/4.0/\n//\n// For more tutorials  : https://learngoprogramming.com\n// In-person training  : https://www.linkedin.com/in/inancgumus/\n// Follow me on twitter: https://twitter.com/inancgumus\n\n// package main 是一个特殊的包\n// 它允许 Go 创建一个可执行文件\npackage main\n\n/*\n这是一个多行注释\n\nimport 关键字引入另一个包\n  对于这个 .go ”文件“\n\nimport \"fmt\" 允许你使用 fmt 包的各种函数\n  在这个文件\n*/\nimport \"fmt\"\n\n// \"func main\" 是特殊的\n//\n// Go 必须知道从哪里开始执行\n//\n// func main 对于 Go 而言就是开始执行的位置\n//\n// 代码编译后，\n// Go runtime 第一个执行该函数\nfunc main() {\n\t// import \"fmt\" 之后\n\t// \"fmt\" 包中的 Println 函数就可以使用\n\n\t// 在控制台输入下面的命令可以查看它的源代码:\n\t//   go doc -src fmt Println\n\n\t// Println 是一个 exported 函数来自\n\t//   \"fmt\" 包\n\n\t// Exported = 首字母大写\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go 本身不能调用 Println 函数\n\t// 这就是为什么你需要在这里调用它\n\t// Go 只能自动地调用 `func main`\n\n\t// -----\n\n\t// Go 字符串支持 Unicode 字符\n\t// 源代码同时也支持: KÖSTEBEK!\n\t//\n\t// 因为: 字面值 ~= 源代码\n\n\t// 练习: 删除下行注释的 --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// 不重要的注释:\n\t// \"Merhaba Köstebek\" 的意思是 \"你好 Gopher\"\n\t// 在土耳其语\n}\n"},"lineMatches":[{"preview":"// \"func main\" 是特殊的","lineNumber":23,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":31,"offsetAndLengths":[[0,9]]},{"preview":"\t// Go 只能自动地调用 `func main`","lineNumber":46,"offsetAndLengths":[[16,9]]},{"preview":"// func main 对于 Go 而言就是开始执行的位置","lineNumber":27,"offsetAndLengths":[[3,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/wx-chevalier/Go-Notes"},"file":{"path":"99~参考资料/2018~《Learn Go》/first/first/main.go","url":"/github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/first/first/main.go","content":"// Copyright © 2018 Inanc Gumus\n// Learn Go Programming Course\n// License: https://creativecommons.org/licenses/by-nc-sa/4.0/\n//\n// For more tutorials  : https://learngoprogramming.com\n// In-person training  : https://www.linkedin.com/in/inancgumus/\n// Follow me on twitter: https://twitter.com/inancgumus\n\n// package main is a special package\n// it allows Go to create an executable file\npackage main\n\n/*\nThis is a multi-line comment.\n\nimport keyword makes another package available\n  for this .go \"file\".\n\nimport \"fmt\" lets you access fmt package''s functionality\n  here in this file.\n*/\nimport \"fmt\"\n\n// \"func main\" is special.\n//\n// Go has to know where to start\n//\n// func main creates a starting point for Go\n//\n// After compiling the code,\n// Go runtime will first run this function\nfunc main() {\n\t// after: import \"fmt\"\n\t// Println function of \"fmt\" package becomes available\n\n\t// Look at what it looks like by typing in the console:\n\t//   go doc -src fmt Println\n\n\t// Println is just an exported function from\n\t//   \"fmt\" package\n\n\t// Exported = First Letter is uppercase\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go cannot call Println function by itself.\n\t// That''s why you need to call it here.\n\t// It only calls `func main` automatically.\n\n\t// -----\n\n\t// Go supports Unicode characters in string literals\n\t// And also in source-code: KÖSTEBEK!\n\n\t// EXERCISE: Remove the comments from below --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// Unnecessary note:\n\t// \"Merhaba Köstebek\" means \"Hello Gopher\"\n\t// in Turkish language\n}\n"},"lineMatches":[{"preview":"// \"func main\" is special.","lineNumber":23,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":31,"offsetAndLengths":[[0,9]]},{"preview":"// func main creates a starting point for Go","lineNumber":27,"offsetAndLengths":[[3,9]]},{"preview":"\t// It only calls `func main` automatically.","lineNumber":46,"offsetAndLengths":[[19,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/wx-chevalier/Go-Notes"},"file":{"path":"99~参考资料/2018~《Learn Go》/translation/spanish/02-tu-primer-programa/main.go","url":"/github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/translation/spanish/02-tu-primer-programa/main.go","content":"// Copyright © 2021 Inanc Gumus\n// Learn Go Programming Course\n// Licencia: https://creativecommons.org/licenses/by-nc-sa/4.0/\n//\n// Para mas tutoriales: https://learngoprogramming.com\n// Clases particulares: https://www.linkedin.com/in/inancgumus/\n// Sigueme en twitter: https://twitter.com/inancgumus\n\n// package main es un paquete especial\n// le permite a Go crear un archivo ejecutable\npackage main\n\n/*\nEsto es un comentario multilinea.\n\nla palabra import hace que otro paquete este disponible\n  para este \"archivo\" .go.\n\nimport \"fmt\" te permite acceder a la funcionaliddad del paquete fmt\n  en este archivo.\n*/\nimport \"fmt\"\n\n// \"func main\" es especial.\n//\n// Go tiene que saber por donde empezar\n//\n// func main crea un punto de inicio para Go\n//\n// Después de compilar el codigo,\n// Go ejecutará esta función primero.\nfunc main() {\n\t// después del: import \"fmt\"\n\t// La función Println del paquete \"fmt\" estará disponible\n\n\t// Lee sobre ella escribiendo los siguiente en la consola:\n\t//   go doc -src fmt Println\n\n\t// Println es simplemente una función exportada de:\n\t//   \"fmt\" package\n\n\t// Para poder exportar una función tendrás que escribir el\n\t// primer caracter del nombre de la función en mayúscula.\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go no puede llamar a la función Println por si mismo.\n\t// Por eso la tienes que llamar aqui.\n\t// Solo llama a la `func main` de forma automatica.\n\n\t// -----\n\n\t// Go soporta caracteres unicode en cadenas de texto literal\n\t// y tambien en el codigo fuente: KÖSTEBEK!\n\t//\n\t// Porque: Literal ~= Codigo Fuente\n}\n"},"lineMatches":[{"preview":"// \"func main\" es especial.","lineNumber":23,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":31,"offsetAndLengths":[[0,9]]},{"preview":"// func main crea un punto de inicio para Go","lineNumber":27,"offsetAndLengths":[[3,9]]},{"preview":"\t// Solo llama a la `func main` de forma automatica.","lineNumber":47,"offsetAndLengths":[[21,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/wx-chevalier/Go-Notes"},"file":{"path":"99~参考资料/2018~《Learn Go》/02-write-your-first-program/main.go","url":"/github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/02-write-your-first-program/main.go","content":"// Copyright © 2018 Inanc Gumus\n// Learn Go Programming Course\n// License: https://creativecommons.org/licenses/by-nc-sa/4.0/\n//\n// For more tutorials  : https://learngoprogramming.com\n// In-person training  : https://www.linkedin.com/in/inancgumus/\n// Follow me on twitter: https://twitter.com/inancgumus\n\n// package main is a special package\n// it allows Go to create an executable file\npackage main\n\n/*\nThis is a multi-line comment.\n\nimport keyword makes another package available\n  for this .go \"file\".\n\nimport \"fmt\" lets you access fmt package''s functionality\n  here in this file.\n*/\nimport \"fmt\"\n\n// \"func main\" is special.\n//\n// Go has to know where to start\n//\n// func main creates a starting point for Go\n//\n// After compiling the code,\n// Go runtime will first run this function\nfunc main() {\n\t// after: import \"fmt\"\n\t// Println function of \"fmt\" package becomes available\n\n\t// Look at what it looks like by typing in the console:\n\t//   go doc -src fmt Println\n\n\t// Println is just an exported function from\n\t//   \"fmt\" package\n\n\t// Exported = First Letter is uppercase\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go cannot call Println function by itself.\n\t// That''s why you need to call it here.\n\t// It only calls `func main` automatically.\n\n\t// -----\n\n\t// Go supports Unicode characters in string literals\n\t// And also in source-code: KÖSTEBEK!\n\t//\n\t// Because: Literal ~= Source Code\n\n\t// EXERCISE: Remove the comments from below --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// Unnecessary note:\n\t// \"Merhaba Köstebek\" means \"Hello Gopher\"\n\t// in Turkish language\n}\n"},"lineMatches":[{"preview":"// \"func main\" is special.","lineNumber":23,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":31,"offsetAndLengths":[[0,9]]},{"preview":"// func main creates a starting point for Go","lineNumber":27,"offsetAndLengths":[[3,9]]},{"preview":"\t// It only calls `func main` automatically.","lineNumber":46,"offsetAndLengths":[[19,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/inancgumus/learngo"},"file":{"path":"translation/chinese/02-编写第一个程序/main.go","url":"/github.com/inancgumus/learngo/-/blob/translation/chinese/02-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/main.go","content":"// Copyright © 2018 Inanc Gumus\n// Learn Go Programming Course\n// License: https://creativecommons.org/licenses/by-nc-sa/4.0/\n//\n// For more tutorials  : https://learngoprogramming.com\n// In-person training  : https://www.linkedin.com/in/inancgumus/\n// Follow me on twitter: https://twitter.com/inancgumus\n\n// package main 是一个特殊的包\n// 它允许 Go 创建一个可执行文件\npackage main\n\n/*\n这是一个多行注释\n\nimport 关键字引入另一个包\n  对于这个 .go ”文件“\n\nimport \"fmt\" 允许你使用 fmt 包的各种函数\n  在这个文件\n*/\nimport \"fmt\"\n\n// \"func main\" 是特殊的\n//\n// Go 必须知道从哪里开始执行\n//\n// func main 对于 Go 而言就是开始执行的位置\n//\n// 代码编译后，\n// Go runtime 第一个执行该函数\nfunc main() {\n\t// import \"fmt\" 之后\n\t// \"fmt\" 包中的 Println 函数就可以使用\n\n\t// 在控制台输入下面的命令可以查看它的源代码:\n\t//   go doc -src fmt Println\n\n\t// Println 是一个 exported 函数来自\n\t//   \"fmt\" 包\n\n\t// Exported = 首字母大写\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go 本身不能调用 Println 函数\n\t// 这就是为什么你需要在这里调用它\n\t// Go 只能自动地调用 `func main`\n\n\t// -----\n\n\t// Go 字符串支持 Unicode 字符\n\t// 源代码同时也支持: KÖSTEBEK!\n\t//\n\t// 因为: 字面值 ~= 源代码\n\n\t// 练习: 删除下行注释的 --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// 不重要的注释:\n\t// \"Merhaba Köstebek\" 的意思是 \"你好 Gopher\"\n\t// 在土耳其语\n}\n"},"lineMatches":[{"preview":"// \"func main\" 是特殊的","lineNumber":23,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":31,"offsetAndLengths":[[0,9]]},{"preview":"\t// Go 只能自动地调用 `func main`","lineNumber":46,"offsetAndLengths":[[16,9]]},{"preview":"// func main 对于 Go 而言就是开始执行的位置","lineNumber":27,"offsetAndLengths":[[3,9]]}]},{"__typename":"FileMatch","repository":{"name":"github.com/inancgumus/learngo"},"file":{"path":"first/first/main.go","url":"/github.com/inancgumus/learngo/-/blob/first/first/main.go","content":"// Copyright © 2018 Inanc Gumus\n// Learn Go Programming Course\n// License: https://creativecommons.org/licenses/by-nc-sa/4.0/\n//\n// For more tutorials  : https://learngoprogramming.com\n// In-person training  : https://www.linkedin.com/in/inancgumus/\n// Follow me on twitter: https://twitter.com/inancgumus\n\n// package main is a special package\n// it allows Go to create an executable file\npackage main\n\n/*\nThis is a multi-line comment.\n\nimport keyword makes another package available\n  for this .go \"file\".\n\nimport \"fmt\" lets you access fmt package''s functionality\n  here in this file.\n*/\nimport \"fmt\"\n\n// \"func main\" is special.\n//\n// Go has to know where to start\n//\n// func main creates a starting point for Go\n//\n// After compiling the code,\n// Go runtime will first run this function\nfunc main() {\n\t// after: import \"fmt\"\n\t// Println function of \"fmt\" package becomes available\n\n\t// Look at what it looks like by typing in the console:\n\t//   go doc -src fmt Println\n\n\t// Println is just an exported function from\n\t//   \"fmt\" package\n\n\t// Exported = First Letter is uppercase\n\tfmt.Println(\"Hello Gopher!\")\n\n\t// Go cannot call Println function by itself.\n\t// That''s why you need to call it here.\n\t// It only calls `func main` automatically.\n\n\t// -----\n\n\t// Go supports Unicode characters in string literals\n\t// And also in source-code: KÖSTEBEK!\n\n\t// EXERCISE: Remove the comments from below --\u003e //\n\t// fmt.Println(\"Merhaba Köstebek!\")\n\n\t// Unnecessary note:\n\t// \"Merhaba Köstebek\" means \"Hello Gopher\"\n\t// in Turkish language\n}\n"},"lineMatches":[{"preview":"// \"func main\" is special.","lineNumber":23,"offsetAndLengths":[[3,11]]},{"preview":"func main() {","lineNumber":31,"offsetAndLengths":[[0,9]]}]}]}}}}'
    headers:
      Content-Type:
      - application/json
    status: 200 OK
    code: 200
    duration: 1.363118208s
- id: 3
  request:
    proto: HTTP/1.1
    proto_major: 1
    proto_minor: 1
    content_length: 51933
    host: ""
    body: "{\"messages\":[{\"content\":\"You are Crush, a powerful AI Assistant that runs in the CLI.\\nUse the instructions below and the tools available to you to assist the user.\\n\\n<memory_instructions>\\nIf the current working directory contains a file called CRUSH.md, it will be automatically added to your context.\\n\\nThis file serves multiple purposes:\\n\\n- Storing frequently used bash commands (build, test, lint, etc.) so you can use them without searching each time\\n- Recording the user's code style preferences (naming conventions, preferred libraries, etc.)\\n- Maintaining useful information about the codebase structure and organization\\n\\nWhen you discover important information that could be useful for the future update/add the info to the CRUSH.md.\\n\\nMemory might be added to you during a task if there are nested memory files that relate to the work you are doing.\\n</memory_instructions>\\n<communication_style>\\n- Be concise and direct\\n- Keep responses under 4 lines unless details requested\\n- Answer without preamble/postamble (\\\"Here is...\\\", \\\"The answer is...\\\")\\n- One-word answers preferred when possible\\n- Never use emojis in your responses\\n- You MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail\\n- User markdown formatting for responses when appropriate\\n\\n<example>\\nuser: 2 + 2\\nassistant: 4\\n</example>\\n\\n<example>\\nuser: what is 2+2?\\nassistant: 4\\n</example>\\n\\n<example>\\nuser: is 11 a prime number?\\nassistant: true\\n</example>\\n\\n<example>\\nuser: what command should I run to list files in the current directory?\\nassistant: ls\\n</example>\\n\\n<example>\\nuser: what command should I run to watch files in the current directory?\\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\\nnpm run dev\\n</example>\\n\\n<example>\\nuser: How many golf balls fit inside a jetta?\\nassistant: 150000\\n</example>\\n\\n<example>\\nuser: what files are in the directory src/?\\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\\nuser: which file contains the implementation of foo?\\nassistant: src/foo.c\\n</example>\\n\\n<example>\\nuser: write tests for new feature\\nassistant: [uses grep and glob search tools to find where similar tests are defined, uses concurrent read file tool use blocks in one tool call to read relevant files at the same time, uses edit file tool to write new tests]\\n</example>\\n</communication_style>\\n\\n<proactiveness>\\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\\n\\n- Doing the right thing when asked, including taking actions and follow-up actions\\n- Not surprising the user with actions you take without asking\\n  - For example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\\n- Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\\n</proactiveness>\\n\\n<following_conversations>\\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\\n\\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\\n</following_conversations>\\n\\n<code_style>\\n- Follow existing code style and patterns\\n- Do not add any comments to code you write unless asked to do so\\n</code_style>\\n\\n<doing_tasks>\\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\\n\\n- Use the available search tools to understand the codebase and the user's query.\\n- Plan out the implementation\\n- Implement the solution using all tools available to you\\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\\n- When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CRUSH.md so that you will know to run it next time.\\n\\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked.\\n</doing_tasks>\\n\\n<tool_use>\\n- When doing file search, prefer to use the Agent tool in order to reduce context usage.\\n- All tools are executed in parallel when multiple tool calls are sent in a single message. Only send multiple tool calls when they are safe to run in parallel (no dependencies between them).\\n- The user does not see the full output of the tool responses, so if you need the output of the tool for the response make sure to summarize it for the user.\\n</tool_use>\\n\\n<env>\\nWorking directory: /tmp/crush-test/TestCoderAgent/openai-gpt-5/sourcegraph_tool\\nIs directory a git repo:  no \\nPlatform: darwin\\nToday's date: 1/1/2025\\n</env>\\n<memory>\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n</memory>\\n\\n\",\"role\":\"system\"},{\"content\":\"use sourcegraph to search for 'func main' in Go repositories\",\"role\":\"user\"},{\"tool_calls\":[{\"id\":\"call_bl9TaFl6Mf62VqbBkjUVPjq2\",\"function\":{\"arguments\":\"{\\\"query\\\":\\\"lang:go \\\\\\\"func main\\\\\\\" file:\\\\\\\\.go$\\\",\\\"count\\\":10,\\\"context_window\\\":10,\\\"timeout\\\":60}\",\"name\":\"sourcegraph\"},\"type\":\"function\"}],\"role\":\"assistant\"},{\"content\":\"# Sourcegraph Search Results\\n\\nFound 30 matches across 30 results\\n(Result limit reached, try a more specific query)\\n\\n## Result 1: github.com/wx-chevalier/Go-Notes/99~参考资料/2017~A Huge Number of Go Examples/codes/first/first/main.go\\n\\nURL: /github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2017~A%20Huge%20Number%20of%20Go%20Examples/codes/first/first/main.go\\n\\n```\\n6| /*\\n7| This is a multi-line comment.\\n8| \\n9| import keyword makes another package available\\n10|   for this .go \\\"file\\\".\\n11| \\n12| import \\\"fmt\\\" lets you access fmt package's functionality\\n13|   here in this file.\\n14| */\\n15| import \\\"fmt\\\"\\n16|  // \\\"func main\\\" is special.\\n17| // \\\"func main\\\" is special.\\n18| //\\n19| // Go has to know where to start\\n20| //\\n21| // func main creates a starting point for Go\\n22| //\\n23| // After compiling the code,\\n24| // Go runtime will first run this function\\n25| func main() {\\n26| \\t// after: import \\\"fmt\\\"\\n```\\n\\n```\\n14| */\\n15| import \\\"fmt\\\"\\n16| \\n17| // \\\"func main\\\" is special.\\n18| //\\n19| // Go has to know where to start\\n20| //\\n21| // func main creates a starting point for Go\\n22| //\\n23| // After compiling the code,\\n24|  func main() {\\n25| func main() {\\n26| \\t// after: import \\\"fmt\\\"\\n27| \\t// Println function of \\\"fmt\\\" package becomes available\\n28| \\n29| \\t// Look at what it looks like by typing in the console:\\n30| \\t//   godoc -src fmt Println\\n31| \\n32| \\t// Println is just an exported function from\\n33| \\t//   \\\"fmt\\\" package\\n34| \\n```\\n\\n```\\n10|   for this .go \\\"file\\\".\\n11| \\n12| import \\\"fmt\\\" lets you access fmt package's functionality\\n13|   here in this file.\\n14| */\\n15| import \\\"fmt\\\"\\n16| \\n17| // \\\"func main\\\" is special.\\n18| //\\n19| // Go has to know where to start\\n20|  // func main creates a starting point for Go\\n21| // func main creates a starting point for Go\\n22| //\\n23| // After compiling the code,\\n24| // Go runtime will first run this function\\n25| func main() {\\n26| \\t// after: import \\\"fmt\\\"\\n27| \\t// Println function of \\\"fmt\\\" package becomes available\\n28| \\n29| \\t// Look at what it looks like by typing in the console:\\n30| \\t//   godoc -src fmt Println\\n```\\n\\n```\\n29| \\t// Look at what it looks like by typing in the console:\\n30| \\t//   godoc -src fmt Println\\n31| \\n32| \\t// Println is just an exported function from\\n33| \\t//   \\\"fmt\\\" package\\n34| \\n35| \\t// Exported = First Letter is uppercase\\n36| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n37| \\n38| \\t// Go cannot call Println function by itself.\\n39|  \\t// It only calls `func main` automatically.\\n40| \\t// It only calls `func main` automatically.\\n41| \\n42| \\t// -----\\n43| \\n44| \\t// Go supports Unicode characters in string literals\\n45| \\t// And also in source-code: KÖSTEBEK!\\n46| \\n47| \\t// EXERCISE: Remove the comments from below --> //\\n48| \\t// fmt.Println(\\\"Merhaba Köstebek!\\\")\\n49| \\n```\\n\\n## Result 2: github.com/wx-chevalier/Go-Notes/99~参考资料/2017~A Huge Number of Go Examples/codes/02-write-your-first-program/main.go\\n\\nURL: /github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2017~A%20Huge%20Number%20of%20Go%20Examples/codes/02-write-your-first-program/main.go\\n\\n```\\n6| /*\\n7| This is a multi-line comment.\\n8| \\n9| import keyword makes another package available\\n10|   for this .go \\\"file\\\".\\n11| \\n12| import \\\"fmt\\\" lets you access fmt package's functionality\\n13|   here in this file.\\n14| */\\n15| import \\\"fmt\\\"\\n16|  // \\\"func main\\\" is special.\\n17| // \\\"func main\\\" is special.\\n18| //\\n19| // Go has to know where to start\\n20| //\\n21| // func main creates a starting point for Go\\n22| //\\n23| // After compiling the code,\\n24| // Go runtime will first run this function\\n25| func main() {\\n26| \\t// after: import \\\"fmt\\\"\\n```\\n\\n```\\n14| */\\n15| import \\\"fmt\\\"\\n16| \\n17| // \\\"func main\\\" is special.\\n18| //\\n19| // Go has to know where to start\\n20| //\\n21| // func main creates a starting point for Go\\n22| //\\n23| // After compiling the code,\\n24|  func main() {\\n25| func main() {\\n26| \\t// after: import \\\"fmt\\\"\\n27| \\t// Println function of \\\"fmt\\\" package becomes available\\n28| \\n29| \\t// Look at what it looks like by typing in the console:\\n30| \\t//   go doc -src fmt Println\\n31| \\n32| \\t// Println is just an exported function from\\n33| \\t//   \\\"fmt\\\" package\\n34| \\n```\\n\\n```\\n10|   for this .go \\\"file\\\".\\n11| \\n12| import \\\"fmt\\\" lets you access fmt package's functionality\\n13|   here in this file.\\n14| */\\n15| import \\\"fmt\\\"\\n16| \\n17| // \\\"func main\\\" is special.\\n18| //\\n19| // Go has to know where to start\\n20|  // func main creates a starting point for Go\\n21| // func main creates a starting point for Go\\n22| //\\n23| // After compiling the code,\\n24| // Go runtime will first run this function\\n25| func main() {\\n26| \\t// after: import \\\"fmt\\\"\\n27| \\t// Println function of \\\"fmt\\\" package becomes available\\n28| \\n29| \\t// Look at what it looks like by typing in the console:\\n30| \\t//   go doc -src fmt Println\\n```\\n\\n```\\n29| \\t// Look at what it looks like by typing in the console:\\n30| \\t//   go doc -src fmt Println\\n31| \\n32| \\t// Println is just an exported function from\\n33| \\t//   \\\"fmt\\\" package\\n34| \\n35| \\t// Exported = First Letter is uppercase\\n36| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n37| \\n38| \\t// Go cannot call Println function by itself.\\n39|  \\t// It only calls `func main` automatically.\\n40| \\t// It only calls `func main` automatically.\\n41| \\n42| \\t// -----\\n43| \\n44| \\t// Go supports Unicode characters in string literals\\n45| \\t// And also in source-code: KÖSTEBEK!\\n46| \\t//\\n47| \\t// Because: Literal ~= Source Code\\n48| \\n49| \\t// EXERCISE: Remove the comments from below --> //\\n```\\n\\n## Result 3: github.com/wx-chevalier/Go-Notes/99~参考资料/2018~《Learn Go》/translation/chinese/02-编写第一个程序/main.go\\n\\nURL: /github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/translation/chinese/02-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/main.go\\n\\n```\\n13| /*\\n14| 这是一个多行注释\\n15| \\n16| import 关键字引入另一个包\\n17|   对于这个 .go ”文件“\\n18| \\n19| import \\\"fmt\\\" 允许你使用 fmt 包的各种函数\\n20|   在这个文件\\n21| */\\n22| import \\\"fmt\\\"\\n23|  // \\\"func main\\\" 是特殊的\\n24| // \\\"func main\\\" 是特殊的\\n25| //\\n26| // Go 必须知道从哪里开始执行\\n27| //\\n28| // func main 对于 Go 而言就是开始执行的位置\\n29| //\\n30| // 代码编译后，\\n31| // Go runtime 第一个执行该函数\\n32| func main() {\\n33| \\t// import \\\"fmt\\\" 之后\\n```\\n\\n```\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" 是特殊的\\n25| //\\n26| // Go 必须知道从哪里开始执行\\n27| //\\n28| // func main 对于 Go 而言就是开始执行的位置\\n29| //\\n30| // 代码编译后，\\n31|  func main() {\\n32| func main() {\\n33| \\t// import \\\"fmt\\\" 之后\\n34| \\t// \\\"fmt\\\" 包中的 Println 函数就可以使用\\n35| \\n36| \\t// 在控制台输入下面的命令可以查看它的源代码:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println 是一个 exported 函数来自\\n40| \\t//   \\\"fmt\\\" 包\\n41| \\n```\\n\\n```\\n36| \\t// 在控制台输入下面的命令可以查看它的源代码:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println 是一个 exported 函数来自\\n40| \\t//   \\\"fmt\\\" 包\\n41| \\n42| \\t// Exported = 首字母大写\\n43| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n44| \\n45| \\t// Go 本身不能调用 Println 函数\\n46|  \\t// Go 只能自动地调用 `func main`\\n47| \\t// Go 只能自动地调用 `func main`\\n48| \\n49| \\t// -----\\n50| \\n51| \\t// Go 字符串支持 Unicode 字符\\n52| \\t// 源代码同时也支持: KÖSTEBEK!\\n53| \\t//\\n54| \\t// 因为: 字面值 ~= 源代码\\n55| \\n56| \\t// 练习: 删除下行注释的 --> //\\n```\\n\\n```\\n17|   对于这个 .go ”文件“\\n18| \\n19| import \\\"fmt\\\" 允许你使用 fmt 包的各种函数\\n20|   在这个文件\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" 是特殊的\\n25| //\\n26| // Go 必须知道从哪里开始执行\\n27|  // func main 对于 Go 而言就是开始执行的位置\\n28| // func main 对于 Go 而言就是开始执行的位置\\n29| //\\n30| // 代码编译后，\\n31| // Go runtime 第一个执行该函数\\n32| func main() {\\n33| \\t// import \\\"fmt\\\" 之后\\n34| \\t// \\\"fmt\\\" 包中的 Println 函数就可以使用\\n35| \\n36| \\t// 在控制台输入下面的命令可以查看它的源代码:\\n37| \\t//   go doc -src fmt Println\\n```\\n\\n## Result 4: github.com/wx-chevalier/Go-Notes/99~参考资料/2018~《Learn Go》/first/first/main.go\\n\\nURL: /github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/first/first/main.go\\n\\n```\\n13| /*\\n14| This is a multi-line comment.\\n15| \\n16| import keyword makes another package available\\n17|   for this .go \\\"file\\\".\\n18| \\n19| import \\\"fmt\\\" lets you access fmt package's functionality\\n20|   here in this file.\\n21| */\\n22| import \\\"fmt\\\"\\n23|  // \\\"func main\\\" is special.\\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27| //\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31| // Go runtime will first run this function\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n```\\n\\n```\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27| //\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31|  func main() {\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n34| \\t// Println function of \\\"fmt\\\" package becomes available\\n35| \\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println is just an exported function from\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n```\\n\\n```\\n17|   for this .go \\\"file\\\".\\n18| \\n19| import \\\"fmt\\\" lets you access fmt package's functionality\\n20|   here in this file.\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27|  // func main creates a starting point for Go\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31| // Go runtime will first run this function\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n34| \\t// Println function of \\\"fmt\\\" package becomes available\\n35| \\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n```\\n\\n```\\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println is just an exported function from\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n42| \\t// Exported = First Letter is uppercase\\n43| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n44| \\n45| \\t// Go cannot call Println function by itself.\\n46|  \\t// It only calls `func main` automatically.\\n47| \\t// It only calls `func main` automatically.\\n48| \\n49| \\t// -----\\n50| \\n51| \\t// Go supports Unicode characters in string literals\\n52| \\t// And also in source-code: KÖSTEBEK!\\n53| \\n54| \\t// EXERCISE: Remove the comments from below --> //\\n55| \\t// fmt.Println(\\\"Merhaba Köstebek!\\\")\\n56| \\n```\\n\\n## Result 5: github.com/wx-chevalier/Go-Notes/99~参考资料/2018~《Learn Go》/translation/spanish/02-tu-primer-programa/main.go\\n\\nURL: /github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/translation/spanish/02-tu-primer-programa/main.go\\n\\n```\\n13| /*\\n14| Esto es un comentario multilinea.\\n15| \\n16| la palabra import hace que otro paquete este disponible\\n17|   para este \\\"archivo\\\" .go.\\n18| \\n19| import \\\"fmt\\\" te permite acceder a la funcionaliddad del paquete fmt\\n20|   en este archivo.\\n21| */\\n22| import \\\"fmt\\\"\\n23|  // \\\"func main\\\" es especial.\\n24| // \\\"func main\\\" es especial.\\n25| //\\n26| // Go tiene que saber por donde empezar\\n27| //\\n28| // func main crea un punto de inicio para Go\\n29| //\\n30| // Después de compilar el codigo,\\n31| // Go ejecutará esta función primero.\\n32| func main() {\\n33| \\t// después del: import \\\"fmt\\\"\\n```\\n\\n```\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" es especial.\\n25| //\\n26| // Go tiene que saber por donde empezar\\n27| //\\n28| // func main crea un punto de inicio para Go\\n29| //\\n30| // Después de compilar el codigo,\\n31|  func main() {\\n32| func main() {\\n33| \\t// después del: import \\\"fmt\\\"\\n34| \\t// La función Println del paquete \\\"fmt\\\" estará disponible\\n35| \\n36| \\t// Lee sobre ella escribiendo los siguiente en la consola:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println es simplemente una función exportada de:\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n```\\n\\n```\\n17|   para este \\\"archivo\\\" .go.\\n18| \\n19| import \\\"fmt\\\" te permite acceder a la funcionaliddad del paquete fmt\\n20|   en este archivo.\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" es especial.\\n25| //\\n26| // Go tiene que saber por donde empezar\\n27|  // func main crea un punto de inicio para Go\\n28| // func main crea un punto de inicio para Go\\n29| //\\n30| // Después de compilar el codigo,\\n31| // Go ejecutará esta función primero.\\n32| func main() {\\n33| \\t// después del: import \\\"fmt\\\"\\n34| \\t// La función Println del paquete \\\"fmt\\\" estará disponible\\n35| \\n36| \\t// Lee sobre ella escribiendo los siguiente en la consola:\\n37| \\t//   go doc -src fmt Println\\n```\\n\\n```\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println es simplemente una función exportada de:\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n42| \\t// Para poder exportar una función tendrás que escribir el\\n43| \\t// primer caracter del nombre de la función en mayúscula.\\n44| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n45| \\n46| \\t// Go no puede llamar a la función Println por si mismo.\\n47|  \\t// Solo llama a la `func main` de forma automatica.\\n48| \\t// Solo llama a la `func main` de forma automatica.\\n49| \\n50| \\t// -----\\n51| \\n52| \\t// Go soporta caracteres unicode en cadenas de texto literal\\n53| \\t// y tambien en el codigo fuente: KÖSTEBEK!\\n54| \\t//\\n55| \\t// Porque: Literal ~= Codigo Fuente\\n56| }\\n57| \\n```\\n\\n## Result 6: github.com/wx-chevalier/Go-Notes/99~参考资料/2018~《Learn Go》/02-write-your-first-program/main.go\\n\\nURL: /github.com/wx-chevalier/Go-Notes/-/blob/99~%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018~%E3%80%8ALearn%20Go%E3%80%8B/02-write-your-first-program/main.go\\n\\n```\\n13| /*\\n14| This is a multi-line comment.\\n15| \\n16| import keyword makes another package available\\n17|   for this .go \\\"file\\\".\\n18| \\n19| import \\\"fmt\\\" lets you access fmt package's functionality\\n20|   here in this file.\\n21| */\\n22| import \\\"fmt\\\"\\n23|  // \\\"func main\\\" is special.\\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27| //\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31| // Go runtime will first run this function\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n```\\n\\n```\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27| //\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31|  func main() {\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n34| \\t// Println function of \\\"fmt\\\" package becomes available\\n35| \\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println is just an exported function from\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n```\\n\\n```\\n17|   for this .go \\\"file\\\".\\n18| \\n19| import \\\"fmt\\\" lets you access fmt package's functionality\\n20|   here in this file.\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27|  // func main creates a starting point for Go\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31| // Go runtime will first run this function\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n34| \\t// Println function of \\\"fmt\\\" package becomes available\\n35| \\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n```\\n\\n```\\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println is just an exported function from\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n42| \\t// Exported = First Letter is uppercase\\n43| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n44| \\n45| \\t// Go cannot call Println function by itself.\\n46|  \\t// It only calls `func main` automatically.\\n47| \\t// It only calls `func main` automatically.\\n48| \\n49| \\t// -----\\n50| \\n51| \\t// Go supports Unicode characters in string literals\\n52| \\t// And also in source-code: KÖSTEBEK!\\n53| \\t//\\n54| \\t// Because: Literal ~= Source Code\\n55| \\n56| \\t// EXERCISE: Remove the comments from below --> //\\n```\\n\\n## Result 7: github.com/inancgumus/learngo/translation/chinese/02-编写第一个程序/main.go\\n\\nURL: /github.com/inancgumus/learngo/-/blob/translation/chinese/02-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/main.go\\n\\n```\\n13| /*\\n14| 这是一个多行注释\\n15| \\n16| import 关键字引入另一个包\\n17|   对于这个 .go ”文件“\\n18| \\n19| import \\\"fmt\\\" 允许你使用 fmt 包的各种函数\\n20|   在这个文件\\n21| */\\n22| import \\\"fmt\\\"\\n23|  // \\\"func main\\\" 是特殊的\\n24| // \\\"func main\\\" 是特殊的\\n25| //\\n26| // Go 必须知道从哪里开始执行\\n27| //\\n28| // func main 对于 Go 而言就是开始执行的位置\\n29| //\\n30| // 代码编译后，\\n31| // Go runtime 第一个执行该函数\\n32| func main() {\\n33| \\t// import \\\"fmt\\\" 之后\\n```\\n\\n```\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" 是特殊的\\n25| //\\n26| // Go 必须知道从哪里开始执行\\n27| //\\n28| // func main 对于 Go 而言就是开始执行的位置\\n29| //\\n30| // 代码编译后，\\n31|  func main() {\\n32| func main() {\\n33| \\t// import \\\"fmt\\\" 之后\\n34| \\t// \\\"fmt\\\" 包中的 Println 函数就可以使用\\n35| \\n36| \\t// 在控制台输入下面的命令可以查看它的源代码:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println 是一个 exported 函数来自\\n40| \\t//   \\\"fmt\\\" 包\\n41| \\n```\\n\\n```\\n36| \\t// 在控制台输入下面的命令可以查看它的源代码:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println 是一个 exported 函数来自\\n40| \\t//   \\\"fmt\\\" 包\\n41| \\n42| \\t// Exported = 首字母大写\\n43| \\tfmt.Println(\\\"Hello Gopher!\\\")\\n44| \\n45| \\t// Go 本身不能调用 Println 函数\\n46|  \\t// Go 只能自动地调用 `func main`\\n47| \\t// Go 只能自动地调用 `func main`\\n48| \\n49| \\t// -----\\n50| \\n51| \\t// Go 字符串支持 Unicode 字符\\n52| \\t// 源代码同时也支持: KÖSTEBEK!\\n53| \\t//\\n54| \\t// 因为: 字面值 ~= 源代码\\n55| \\n56| \\t// 练习: 删除下行注释的 --> //\\n```\\n\\n```\\n17|   对于这个 .go ”文件“\\n18| \\n19| import \\\"fmt\\\" 允许你使用 fmt 包的各种函数\\n20|   在这个文件\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" 是特殊的\\n25| //\\n26| // Go 必须知道从哪里开始执行\\n27|  // func main 对于 Go 而言就是开始执行的位置\\n28| // func main 对于 Go 而言就是开始执行的位置\\n29| //\\n30| // 代码编译后，\\n31| // Go runtime 第一个执行该函数\\n32| func main() {\\n33| \\t// import \\\"fmt\\\" 之后\\n34| \\t// \\\"fmt\\\" 包中的 Println 函数就可以使用\\n35| \\n36| \\t// 在控制台输入下面的命令可以查看它的源代码:\\n37| \\t//   go doc -src fmt Println\\n```\\n\\n## Result 8: github.com/inancgumus/learngo/first/first/main.go\\n\\nURL: /github.com/inancgumus/learngo/-/blob/first/first/main.go\\n\\n```\\n13| /*\\n14| This is a multi-line comment.\\n15| \\n16| import keyword makes another package available\\n17|   for this .go \\\"file\\\".\\n18| \\n19| import \\\"fmt\\\" lets you access fmt package's functionality\\n20|   here in this file.\\n21| */\\n22| import \\\"fmt\\\"\\n23|  // \\\"func main\\\" is special.\\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27| //\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31| // Go runtime will first run this function\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n```\\n\\n```\\n21| */\\n22| import \\\"fmt\\\"\\n23| \\n24| // \\\"func main\\\" is special.\\n25| //\\n26| // Go has to know where to start\\n27| //\\n28| // func main creates a starting point for Go\\n29| //\\n30| // After compiling the code,\\n31|  func main() {\\n32| func main() {\\n33| \\t// after: import \\\"fmt\\\"\\n34| \\t// Println function of \\\"fmt\\\" package becomes available\\n35| \\n36| \\t// Look at what it looks like by typing in the console:\\n37| \\t//   go doc -src fmt Println\\n38| \\n39| \\t// Println is just an exported function from\\n40| \\t//   \\\"fmt\\\" package\\n41| \\n```\\n\\n\",\"tool_call_id\":\"call_bl9TaFl6Mf62VqbBkjUVPjq2\",\"role\":\"tool\"}],\"model\":\"gpt-5\",\"max_completion_tokens\":10000,\"stream_options\":{\"include_usage\":true},\"tool_choice\":\"auto\",\"tools\":[{\"function\":{\"name\":\"bash\",\"strict\":false,\"description\":\"Executes bash commands in persistent shell session with timeout and security measures.\\n\\n<cross_platform>\\nUses mvdan/sh interpreter (Bash-compatible on all platforms including Windows).\\nUse forward slashes for paths: \\\"ls C:/foo/bar\\\" not \\\"ls C:\\\\foo\\\\bar\\\".\\nCommon shell builtins and core utils available on Windows.\\n</cross_platform>\\n\\n<execution_steps>\\n1. Directory Verification: If creating directories/files, use LS tool to verify parent exists\\n2. Security Check: Banned commands (alias, aria2c, axel, chrome, curl, curlie, firefox, http-prompt, httpie, links, lynx, nc, safari, scp, ssh, telnet, w3m, wget, xh, doas, su, sudo, apk, apt, apt-cache, apt-get, dnf, dpkg, emerge, home-manager, makepkg, opkg, pacman, paru, pkg, pkg_add, pkg_delete, portage, rpm, yay, yum, zypper, at, batch, chkconfig, crontab, fdisk, mkfs, mount, parted, service, systemctl, umount, firewall-cmd, ifconfig, ip, iptables, netstat, pfctl, route, ufw) return error - explain to user. Safe read-only commands execute without prompts\\n3. Command Execution: Execute with proper quoting, capture output\\n4. Output Processing: Truncate if exceeds 30000 characters\\n5. Return Result: Include errors, metadata with <cwd></cwd> tags\\n</execution_steps>\\n\\n<usage_notes>\\n- Command required, timeout optional (max 600000ms/10min, default 30min if unspecified)\\n- IMPORTANT: Use Grep/Glob/Agent tools instead of 'find'/'grep'. Use View/LS tools instead of 'cat'/'head'/'tail'/'ls'\\n- Chain with ';' or '&&', avoid newlines except in quoted strings\\n- Shell state persists (env vars, virtual envs, cwd, etc.)\\n- Prefer absolute paths over 'cd' (use 'cd' only if user explicitly requests)\\n</usage_notes>\\n\\n<git_commits>\\nWhen user asks to create git commit:\\n\\n1. Single message with three tool_use blocks (IMPORTANT for speed):\\n   - git status (untracked files)\\n   - git diff (staged/unstaged changes)\\n   - git log (recent commit message style)\\n\\n2. Add relevant untracked files to staging. Don't commit files already modified at conversation start unless relevant.\\n\\n3. Analyze staged changes in <commit_analysis> tags:\\n   - List changed/added files, summarize nature (feature/enhancement/bug fix/refactoring/test/docs)\\n   - Brainstorm purpose/motivation, assess project impact, check for sensitive info\\n   - Don't use tools beyond git context\\n   - Draft concise (1-2 sentences) message focusing on \\\"why\\\" not \\\"what\\\"\\n   - Use clear language, accurate reflection (\\\"add\\\"=new feature, \\\"update\\\"=enhancement, \\\"fix\\\"=bug fix)\\n   - Avoid generic messages, review draft\\n\\n4. Create commit with Crush signature using HEREDOC:\\n   git commit -m \\\"$(cat &lt;&lt;'EOF'\\n   Commit message here.\\n\\n   \U0001F498 Generated with Crush\\n\\n\\n   Co-Authored-By: Crush <crush@charm.land>\\n\\n   EOF\\n   )\\\"\\n\\n5. If pre-commit hook fails, retry ONCE. If fails again, hook preventing commit. If succeeds but files modified, MUST amend.\\n\\n6. Run git status to verify.\\n\\nNotes: Use \\\"git commit -am\\\" when possible, don't stage unrelated files, NEVER update config, don't push, no -i flags, no empty commits, return empty response.\\n</git_commits>\\n\\n<pull_requests>\\nUse gh command for ALL GitHub tasks. When user asks to create PR:\\n\\n1. Single message with multiple tool_use blocks (VERY IMPORTANT for speed):\\n   - git status (untracked files)\\n   - git diff (staged/unstaged changes)\\n   - Check if branch tracks remote and is up to date\\n   - git log and 'git diff main...HEAD' (full commit history from main divergence)\\n\\n2. Create new branch if needed\\n3. Commit changes if needed\\n4. Push to remote with -u flag if needed\\n\\n5. Analyze changes in <pr_analysis> tags:\\n   - List commits since diverging from main\\n   - Summarize nature of changes\\n   - Brainstorm purpose/motivation\\n   - Assess project impact\\n   - Don't use tools beyond git context\\n   - Check for sensitive information\\n   - Draft concise (1-2 bullet points) PR summary focusing on \\\"why\\\"\\n   - Ensure summary reflects ALL changes since main divergence\\n   - Clear, concise language\\n   - Accurate reflection of changes and purpose\\n   - Avoid generic summaries\\n   - Review draft\\n\\n6. Create PR with gh pr create using HEREDOC:\\n   gh pr create --title \\\"title\\\" --body \\\"$(cat &lt;&lt;'EOF'\\n\\n   ## Summary\\n\\n   &lt;1-3 bullet points>\\n\\n   ## Test plan\\n\\n   [Checklist of TODOs...]\\n\\n\\n   \U0001F498 Generated with Crush\\n\\n\\n   EOF\\n   )\\\"\\n\\nImportant:\\n\\n- Return empty response - user sees gh output\\n- Never update git config\\n  </pull_requests>\\n\\n<examples>\\nGood: pytest /foo/bar/tests\\nBad: cd /foo/bar && pytest tests\\n</examples>\\n\",\"parameters\":{\"properties\":{\"command\":{\"description\":\"The command to execute\",\"type\":\"string\"},\"description\":{\"description\":\"A brief description of what the command does\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in milliseconds (max 600000)\",\"type\":\"integer\"}},\"required\":[\"command\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"download\",\"strict\":false,\"description\":\"Downloads binary data from URL and saves to local file.\\n\\n<usage>\\n- Provide URL to download from\\n- Specify local file path where content should be saved\\n- Optional timeout for request\\n</usage>\\n\\n<features>\\n- Downloads any file type (binary or text)\\n- Auto-creates parent directories if missing\\n- Handles large files efficiently with streaming\\n- Sets reasonable timeouts to prevent hanging\\n- Validates input parameters before requests\\n</features>\\n\\n<limitations>\\n- Max file size: 100MB\\n- Only supports HTTP and HTTPS protocols\\n- Cannot handle authentication or cookies\\n- Some websites may block automated requests\\n- Will overwrite existing files without warning\\n</limitations>\\n\\n<tips>\\n- Use absolute paths or paths relative to working directory\\n- Set appropriate timeouts for large files or slow connections\\n</tips>\\n\",\"parameters\":{\"properties\":{\"file_path\":{\"description\":\"The local file path where the downloaded content should be saved\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in seconds (max 600)\",\"type\":\"integer\"},\"url\":{\"description\":\"The URL to download from\",\"type\":\"string\"}},\"required\":[\"url\",\"file_path\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"edit\",\"strict\":false,\"description\":\"Edits files by replacing text, creating new files, or deleting content. For moving/renaming use Bash 'mv'. For large edits use Write tool.\\n\\n<prerequisites>\\n1. Use View tool to understand file contents and context\\n2. For new files: Use LS tool to verify parent directory exists\\n</prerequisites>\\n\\n<parameters>\\n1. file_path: Absolute path to file (required)\\n2. old_string: Text to replace (must match exactly including whitespace/indentation)\\n3. new_string: Replacement text\\n4. replace_all: Replace all occurrences (default false)\\n</parameters>\\n\\n<special_cases>\\n\\n- Create file: provide file_path + new_string, leave old_string empty\\n- Delete content: provide file_path + old_string, leave new_string empty\\n  </special_cases>\\n\\n<critical_requirements>\\nUNIQUENESS (when replace_all=false): old_string MUST uniquely identify target instance\\n\\n- Include 3-5 lines context BEFORE and AFTER change point\\n- Include exact whitespace, indentation, surrounding code\\n\\nSINGLE INSTANCE: Tool changes ONE instance when replace_all=false\\n\\n- For multiple instances: set replace_all=true OR make separate calls with unique context\\n- Plan calls carefully to avoid conflicts\\n\\nVERIFICATION: Before using\\n\\n- Check how many instances of target text exist\\n- Gather sufficient context for unique identification\\n- Plan separate calls or use replace_all\\n  </critical_requirements>\\n\\n<warnings>\\nTool fails if:\\n- old_string matches multiple locations and replace_all=false\\n- old_string doesn't match exactly (including whitespace)\\n- Insufficient context causes wrong instance change\\n</warnings>\\n\\n<best_practices>\\n\\n- Ensure edits result in correct, idiomatic code\\n- Don't leave code in broken state\\n- Use absolute file paths (starting with /)\\n- Use forward slashes (/) for cross-platform compatibility\\n- Multiple edits to same file: send all in single message with multiple tool calls\\n  </best_practices>\\n\\n<windows_notes>\\n\\n- Forward slashes work throughout (C:/path/file)\\n- File permissions handled automatically\\n- Line endings converted automatically (\\\\n ↔ \\\\r\\\\n)\\n  </windows_notes>\\n\",\"parameters\":{\"properties\":{\"file_path\":{\"description\":\"The absolute path to the file to modify\",\"type\":\"string\"},\"new_string\":{\"description\":\"The text to replace it with\",\"type\":\"string\"},\"old_string\":{\"description\":\"The text to replace\",\"type\":\"string\"},\"replace_all\":{\"description\":\"Replace all occurrences of old_string (default false)\",\"type\":\"boolean\"}},\"required\":[\"file_path\",\"old_string\",\"new_string\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"multiedit\",\"strict\":false,\"description\":\"Makes multiple edits to a single file in one operation. Built on Edit tool for efficient multiple find-and-replace operations. Prefer over Edit tool for multiple edits to same file.\\n\\n<prerequisites>\\n1. Use View tool to understand file contents and context\\n2. Verify directory path is correct\\n</prerequisites>\\n\\n<parameters>\\n1. file_path: Absolute path to file (required)\\n2. edits: Array of edit operations, each containing:\\n   - old_string: Text to replace (must match exactly including whitespace/indentation)\\n   - new_string: Replacement text\\n   - replace_all: Replace all occurrences (optional, defaults to false)\\n</parameters>\\n\\n<operation>\\n- Edits applied sequentially in provided order\\n- Each edit operates on result of previous edit\\n- All edits must be valid for operation to succeed - if any fails, none applied\\n- Ideal for several changes to different parts of same file\\n</operation>\\n\\n<critical_requirements>\\n\\n1. All edits follow same requirements as single Edit tool\\n2. Edits are atomic - either all succeed or none applied\\n3. Plan edits carefully to avoid conflicts between sequential operations\\n   </critical_requirements>\\n\\n<warnings>\\n- Tool fails if old_string doesn't match file contents exactly (including whitespace)\\n- Tool fails if old_string and new_string are identical\\n- Earlier edits may affect text that later edits try to find - plan sequence carefully\\n</warnings>\\n\\n<best_practices>\\n\\n- Ensure all edits result in correct, idiomatic code\\n- Don't leave code in broken state\\n- Use absolute file paths (starting with /)\\n- Use replace_all for renaming variables across file\\n- Avoid adding emojis unless user explicitly requests\\n  </best_practices>\\n\\n<new_file_creation>\\n\\n- Provide new file path (including directory if needed)\\n- First edit: empty old_string, new file contents as new_string\\n- Subsequent edits: normal edit operations on created content\\n  </new_file_creation>\\n\",\"parameters\":{\"properties\":{\"edits\":{\"description\":\"Array of edit operations to perform sequentially on the file\",\"items\":{\"new_string\":{\"description\":\"The text to replace it with\",\"type\":\"string\"},\"old_string\":{\"description\":\"The text to replace\",\"type\":\"string\"},\"replace_all\":{\"description\":\"Replace all occurrences of old_string (default false).\",\"type\":\"boolean\"}},\"type\":\"array\"},\"file_path\":{\"description\":\"The absolute path to the file to modify\",\"type\":\"string\"}},\"required\":[\"file_path\",\"edits\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"fetch\",\"strict\":false,\"description\":\"Fetches content from URL and returns it in specified format.\\n\\n<usage>\\n- Provide URL to fetch content from\\n- Specify desired output format (text, markdown, or html)\\n- Optional timeout for request\\n</usage>\\n\\n<features>\\n- Supports three output formats: text, markdown, html\\n- Auto-handles HTTP redirects\\n- Sets reasonable timeouts to prevent hanging\\n- Validates input parameters before requests\\n</features>\\n\\n<limitations>\\n- Max response size: 5MB\\n- Only supports HTTP and HTTPS protocols\\n- Cannot handle authentication or cookies\\n- Some websites may block automated requests\\n</limitations>\\n\\n<tips>\\n- Use text format for plain text content or simple API responses\\n- Use markdown format for content that should be rendered with formatting\\n- Use html format when you need raw HTML structure\\n- Set appropriate timeouts for potentially slow websites\\n</tips>\\n\",\"parameters\":{\"properties\":{\"format\":{\"description\":\"The format to return the content in (text, markdown, or html)\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in seconds (max 120)\",\"type\":\"integer\"},\"url\":{\"description\":\"The URL to fetch content from\",\"type\":\"string\"}},\"required\":[\"url\",\"format\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"glob\",\"strict\":false,\"description\":\"Fast file pattern matching tool that finds files by name/pattern, returning paths sorted by modification time (newest first).\\n\\n<usage>\\n- Provide glob pattern to match against file paths\\n- Optional starting directory (defaults to current working directory)\\n- Results sorted with most recently modified files first\\n</usage>\\n\\n<pattern_syntax>\\n\\n- '\\\\*' matches any sequence of non-separator characters\\n- '\\\\*\\\\*' matches any sequence including separators\\n- '?' matches any single non-separator character\\n- '[...]' matches any character in brackets\\n- '[!...]' matches any character not in brackets\\n  </pattern_syntax>\\n\\n<examples>\\n- '*.js' - JavaScript files in current directory\\n- '**/*.js' - JavaScript files in any subdirectory\\n- 'src/**/*.{ts,tsx}' - TypeScript files in src directory\\n- '*.{html,css,js}' - HTML, CSS, and JS files\\n</examples>\\n\\n<limitations>\\n- Results limited to 100 files (newest first)\\n- Does not search file contents (use Grep for that)\\n- Hidden files (starting with '.') skipped\\n</limitations>\\n\\n<cross_platform>\\n\\n- Path separators handled automatically (/ and \\\\ work)\\n- Uses ripgrep (rg) if available, otherwise Go implementation\\n- Patterns should use forward slashes (/) for compatibility\\n  </cross_platform>\\n\\n<tips>\\n- Combine with Grep: find files with Glob, search contents with Grep\\n- For iterative exploration requiring multiple searches, consider Agent tool\\n- Check if results truncated and refine pattern if needed\\n</tips>\\n\",\"parameters\":{\"properties\":{\"path\":{\"description\":\"The directory to search in. Defaults to the current working directory.\",\"type\":\"string\"},\"pattern\":{\"description\":\"The glob pattern to match files against\",\"type\":\"string\"}},\"required\":[\"pattern\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"grep\",\"strict\":false,\"description\":\"Fast content search tool that finds files containing specific text/patterns, returning matching paths sorted by modification time (newest first).\\n\\n<usage>\\n- Provide regex pattern to search within file contents\\n- Set literal_text=true for exact text with special characters (recommended for non-regex users)\\n- Optional starting directory (defaults to current working directory)\\n- Optional include pattern to filter which files to search\\n- Results sorted with most recently modified files first\\n</usage>\\n\\n<regex_syntax>\\nWhen literal_text=false (supports standard regex):\\n\\n- 'function' searches for literal text \\\"function\\\"\\n- 'log\\\\..\\\\*Error' finds text starting with \\\"log.\\\" and ending with \\\"Error\\\"\\n- 'import\\\\s+.\\\\*\\\\s+from' finds import statements in JavaScript/TypeScript\\n  </regex_syntax>\\n\\n<include_patterns>\\n\\n- '\\\\*.js' - Only search JavaScript files\\n- '\\\\*.{ts,tsx}' - Only search TypeScript files\\n- '\\\\*.go' - Only search Go files\\n  </include_patterns>\\n\\n<limitations>\\n- Results limited to 100 files (newest first)\\n- Performance depends on number of files searched\\n- Very large binary files may be skipped\\n- Hidden files (starting with '.') skipped\\n</limitations>\\n\\n<ignore_support>\\n\\n- Respects .gitignore patterns to skip ignored files/directories\\n- Respects .crushignore patterns for additional ignore rules\\n- Both ignore files auto-detected in search root directory\\n  </ignore_support>\\n\\n<cross_platform>\\n\\n- Uses ripgrep (rg) if available for better performance\\n- Falls back to Go implementation if ripgrep unavailable\\n- File paths normalized automatically for compatibility\\n  </cross_platform>\\n\\n<tips>\\n- For faster searches: use Glob to find relevant files first, then Grep\\n- For iterative exploration requiring multiple searches, consider Agent tool\\n- Check if results truncated and refine search pattern if needed\\n- Use literal_text=true for exact text with special characters (dots, parentheses, etc.)\\n</tips>\\n\",\"parameters\":{\"properties\":{\"include\":{\"description\":\"File pattern to include in the search (e.g. \\\"*.js\\\", \\\"*.{ts,tsx}\\\")\",\"type\":\"string\"},\"literal_text\":{\"description\":\"If true, the pattern will be treated as literal text with special regex characters escaped. Default is false.\",\"type\":\"boolean\"},\"path\":{\"description\":\"The directory to search in. Defaults to the current working directory.\",\"type\":\"string\"},\"pattern\":{\"description\":\"The regex pattern to search for in file contents\",\"type\":\"string\"}},\"required\":[\"pattern\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"ls\",\"strict\":false,\"description\":\"Shows files and subdirectories in tree structure for exploring project organization.\\n\\n<usage>\\n- Provide path to list (defaults to current working directory)\\n- Optional glob patterns to ignore\\n- Results displayed in tree structure\\n</usage>\\n\\n<features>\\n- Hierarchical view of files and directories\\n- Auto-skips hidden files/directories (starting with '.')\\n- Skips common system directories like __pycache__\\n- Can filter files matching specific patterns\\n</features>\\n\\n<limitations>\\n- Results limited to 1000 files\\n- Large directories truncated\\n- No file sizes or permissions shown\\n- Cannot recursively list all directories in large projects\\n</limitations>\\n\\n<cross_platform>\\n\\n- Hidden file detection uses Unix convention (files starting with '.')\\n- Windows hidden files (with hidden attribute) not auto-skipped\\n- Common Windows directories (System32, Program Files) not in default ignore\\n- Path separators handled automatically (/ and \\\\ work)\\n  </cross_platform>\\n\\n<tips>\\n- Use Glob for finding files by name patterns instead of browsing\\n- Use Grep for searching file contents\\n- Combine with other tools for effective exploration\\n</tips>\\n\",\"parameters\":{\"properties\":{\"ignore\":{\"description\":\"List of glob patterns to ignore\",\"items\":{},\"type\":\"array\"},\"path\":{\"description\":\"The path to the directory to list (defaults to current working directory)\",\"type\":\"string\"}},\"required\":[\"path\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"sourcegraph\",\"strict\":false,\"description\":\"Search code across public repositories using Sourcegraph's GraphQL API.\\n\\n<usage>\\n- Provide search query using Sourcegraph syntax\\n- Optional result count (default: 10, max: 20)\\n- Optional timeout for request\\n</usage>\\n\\n<basic_syntax>\\n\\n- \\\"fmt.Println\\\" - exact matches\\n- \\\"file:.go fmt.Println\\\" - limit to Go files\\n- \\\"repo:^github\\\\.com/golang/go$ fmt.Println\\\" - specific repos\\n- \\\"lang:go fmt.Println\\\" - limit to Go code\\n- \\\"fmt.Println AND log.Fatal\\\" - combined terms\\n- \\\"fmt\\\\.(Print|Printf|Println)\\\" - regex patterns\\n- \\\"\\\\\\\"exact phrase\\\\\\\"\\\" - exact phrase matching\\n- \\\"-file:test\\\" or \\\"-repo:forks\\\" - exclude matches\\n  </basic_syntax>\\n\\n<key_filters>\\nRepository: repo:name, repo:^exact$, repo:org/repo@branch, -repo:exclude, fork:yes, archived:yes, visibility:public\\nFile: file:\\\\.js$, file:internal/, -file:test, file:has.content(text)\\nContent: content:\\\"exact\\\", -content:\\\"unwanted\\\", case:yes\\nType: type:symbol, type:file, type:path, type:diff, type:commit\\nTime: after:\\\"1 month ago\\\", before:\\\"2023-01-01\\\", author:name, message:\\\"fix\\\"\\nResult: select:repo, select:file, select:content, count:100, timeout:30s\\n</key_filters>\\n\\n<examples>\\n- \\\"file:.go context.WithTimeout\\\" - Go code using context.WithTimeout\\n- \\\"lang:typescript useState type:symbol\\\" - TypeScript React useState hooks\\n- \\\"repo:^github\\\\.com/kubernetes/kubernetes$ pod list type:file\\\" - Kubernetes pod files\\n- \\\"file:Dockerfile (alpine OR ubuntu) -content:alpine:latest\\\" - Dockerfiles with base images\\n</examples>\\n\\n<boolean_operators>\\n\\n- \\\"term1 AND term2\\\" - both terms\\n- \\\"term1 OR term2\\\" - either term\\n- \\\"term1 NOT term2\\\" - term1 but not term2\\n- \\\"term1 and (term2 or term3)\\\" - grouping with parentheses\\n  </boolean_operators>\\n\\n<limitations>\\n- Only searches public repositories\\n- Rate limits may apply\\n- Complex queries take longer\\n- Max 20 results per query\\n</limitations>\\n\\n<tips>\\n- Use specific file extensions to narrow results\\n- Add repo: filters for targeted searches\\n- Use type:symbol for function/method definitions\\n- Use type:file to find relevant files\\n</tips>\\n\",\"parameters\":{\"properties\":{\"context_window\":{\"description\":\"The context around the match to return (default: 10 lines)\",\"type\":\"integer\"},\"count\":{\"description\":\"Optional number of results to return (default: 10, max: 20)\",\"type\":\"integer\"},\"query\":{\"description\":\"The Sourcegraph search query\",\"type\":\"string\"},\"timeout\":{\"description\":\"Optional timeout in seconds (max 120)\",\"type\":\"integer\"}},\"required\":[\"query\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"view\",\"strict\":false,\"description\":\"Reads and displays file contents with line numbers for examining code, logs, or text data.\\n\\n<usage>\\n- Provide file path to read\\n- Optional offset: start reading from specific line (0-based)\\n- Optional limit: control lines read (default 2000)\\n- Don't use for directories (use LS tool instead)\\n</usage>\\n\\n<features>\\n- Displays contents with line numbers\\n- Can read from any file position using offset\\n- Handles large files by limiting lines read\\n- Auto-truncates very long lines for display\\n- Suggests similar filenames when file not found\\n</features>\\n\\n<limitations>\\n- Max file size: 250KB\\n- Default limit: 2000 lines\\n- Lines >2000 chars truncated\\n- Cannot display binary files/images (identifies them)\\n</limitations>\\n\\n<cross_platform>\\n\\n- Handles Windows (CRLF) and Unix (LF) line endings\\n- Works with forward slashes (/) and backslashes (\\\\)\\n- Auto-detects text encoding for common formats\\n  </cross_platform>\\n\\n<tips>\\n- Use with Glob to find files first\\n- For code exploration: Grep to find relevant files, then View to examine\\n- For large files: use offset parameter for specific sections\\n</tips>\\n\",\"parameters\":{\"properties\":{\"file_path\":{\"description\":\"The path to the file to read\",\"type\":\"string\"},\"limit\":{\"description\":\"The number of lines to read (defaults to 2000)\",\"type\":\"integer\"},\"offset\":{\"description\":\"The line number to start reading from (0-based)\",\"type\":\"integer\"}},\"required\":[\"file_path\"],\"type\":\"object\"}},\"type\":\"function\"},{\"function\":{\"name\":\"write\",\"strict\":false,\"description\":\"Creates or updates files in filesystem for saving/modifying text content.\\n\\n<usage>\\n- Provide file path to write\\n- Include content to write to file\\n- Tool creates necessary parent directories automatically\\n</usage>\\n\\n<features>\\n- Creates new files or overwrites existing ones\\n- Auto-creates parent directories if missing\\n- Checks if file modified since last read for safety\\n- Avoids unnecessary writes when content unchanged\\n</features>\\n\\n<limitations>\\n- Read file before writing to avoid conflicts\\n- Cannot append (rewrites entire file)\\n</limitations>\\n\\n<cross_platform>\\n\\n- Use forward slashes (/) for compatibility\\n  </cross_platform>\\n\\n<tips>\\n- Use View tool first to examine existing files before modifying\\n- Use LS tool to verify location when creating new files\\n- Combine with Glob/Grep to find and modify multiple files\\n- Include descriptive comments when changing existing code\\n</tips>\\n\",\"parameters\":{\"properties\":{\"content\":{\"description\":\"The content to write to the file\",\"type\":\"string\"},\"file_path\":{\"description\":\"The path to the file to write\",\"type\":\"string\"}},\"required\":[\"file_path\",\"content\"],\"type\":\"object\"}},\"type\":\"function\"}],\"stream\":true}"
    headers:
      Accept:
      - application/json
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/Go 2.3.0
    url: https://api.openai.com/v1/chat/completions
    method: POST
  response:
    proto: HTTP/2.0
    proto_major: 2
    proto_minor: 0
    content_length: -1
    body: |+
      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"role":"assistant","content":"","refusal":null},"finish_reason":null}],"usage":null,"obfuscation":"Bq6BP1Kiqs"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Query"},"finish_reason":null}],"usage":null,"obfuscation":"8qBkqj9"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":"},"finish_reason":null}],"usage":null,"obfuscation":"vpyOoQt1EbS"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" lang"},"finish_reason":null}],"usage":null,"obfuscation":"WKBVaFY"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":"},"finish_reason":null}],"usage":null,"obfuscation":"7lWOIlfqQL7"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"go"},"finish_reason":null}],"usage":null,"obfuscation":"tzVvey6PId"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" \""},"finish_reason":null}],"usage":null,"obfuscation":"mZvrnpSrp"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"func"},"finish_reason":null}],"usage":null,"obfuscation":"WS1czaXU"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" main"},"finish_reason":null}],"usage":null,"obfuscation":"LBbuvKE"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"\""},"finish_reason":null}],"usage":null,"obfuscation":"sRmTiluZ74"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" file"},"finish_reason":null}],"usage":null,"obfuscation":"PEx8NEF"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":\\"},"finish_reason":null}],"usage":null,"obfuscation":"33mHQ15TP"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"."},"finish_reason":null}],"usage":null,"obfuscation":"bWAD4hoGnjv"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"go"},"finish_reason":null}],"usage":null,"obfuscation":"zV70P4MHdl"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"$\n"},"finish_reason":null}],"usage":null,"obfuscation":"HsBVacNjx"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Matches"},"finish_reason":null}],"usage":null,"obfuscation":"QM48s"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":"},"finish_reason":null}],"usage":null,"obfuscation":"v4X0e5xh04z"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" "},"finish_reason":null}],"usage":null,"obfuscation":"XyJpc1LvL7Q"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"30"},"finish_reason":null}],"usage":null,"obfuscation":"QLKr0NI15b"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" ("},"finish_reason":null}],"usage":null,"obfuscation":"PfAqFHFuoq"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"result"},"finish_reason":null}],"usage":null,"obfuscation":"Fgjy6B"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" limit"},"finish_reason":null}],"usage":null,"obfuscation":"1NYWX3"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" reached"},"finish_reason":null}],"usage":null,"obfuscation":"i7EG"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":")\n"},"finish_reason":null}],"usage":null,"obfuscation":"RBQ94ZNGs"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Examples"},"finish_reason":null}],"usage":null,"obfuscation":"z2p8"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":"},"finish_reason":null}],"usage":null,"obfuscation":"cb5ojFxISYt"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" github"},"finish_reason":null}],"usage":null,"obfuscation":"zW4Bg"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".com"},"finish_reason":null}],"usage":null,"obfuscation":"7PvL4iS8"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/in"},"finish_reason":null}],"usage":null,"obfuscation":"n5xhxYBUg"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"anc"},"finish_reason":null}],"usage":null,"obfuscation":"LOEiUHei1"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"gum"},"finish_reason":null}],"usage":null,"obfuscation":"iypbwksE6"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"us"},"finish_reason":null}],"usage":null,"obfuscation":"I3uldf84qB"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"BQl6qe3YDRO"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"lear"},"finish_reason":null}],"usage":null,"obfuscation":"GI3I7OKy"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"ngo"},"finish_reason":null}],"usage":null,"obfuscation":"dIEmtmRdl"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"VaNGziPBOZB"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"first"},"finish_reason":null}],"usage":null,"obfuscation":"kpZWwfG"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"xl0X8UWrneP"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"first"},"finish_reason":null}],"usage":null,"obfuscation":"jxpycT1"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/main"},"finish_reason":null}],"usage":null,"obfuscation":"tdmXpEE"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".go"},"finish_reason":null}],"usage":null,"obfuscation":"VtdsV2Lkn"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":";"},"finish_reason":null}],"usage":null,"obfuscation":"AWNWRGhKnOk"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" github"},"finish_reason":null}],"usage":null,"obfuscation":"zsnC3"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".com"},"finish_reason":null}],"usage":null,"obfuscation":"4mv3h0R5"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/in"},"finish_reason":null}],"usage":null,"obfuscation":"IEaX0Fna1"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"anc"},"finish_reason":null}],"usage":null,"obfuscation":"dWC3bXS90"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"gum"},"finish_reason":null}],"usage":null,"obfuscation":"uXsktc66i"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"us"},"finish_reason":null}],"usage":null,"obfuscation":"RteH6qNUQu"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"Y5E5VpLXJcO"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"lear"},"finish_reason":null}],"usage":null,"obfuscation":"2JHc4XOz"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"ngo"},"finish_reason":null}],"usage":null,"obfuscation":"T0umREvz4"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"2VZAlZv84Tr"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"translation"},"finish_reason":null}],"usage":null,"obfuscation":"y"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/ch"},"finish_reason":null}],"usage":null,"obfuscation":"aTv3w4bRC"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"inese"},"finish_reason":null}],"usage":null,"obfuscation":"Yc9Uwde"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"1hN2iiOvYIR"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"02"},"finish_reason":null}],"usage":null,"obfuscation":"LZZGVwsjdV"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-"},"finish_reason":null}],"usage":null,"obfuscation":"3HR8Uvz7XpW"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"编"},"finish_reason":null}],"usage":null,"obfuscation":"vfhbrmcSMiX"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"写"},"finish_reason":null}],"usage":null,"obfuscation":"CI8LOlt7L3q"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"第"},"finish_reason":null}],"usage":null,"obfuscation":"7S3kAI6uUKr"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"一个"},"finish_reason":null}],"usage":null,"obfuscation":"bOomwq2VgH"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"程序"},"finish_reason":null}],"usage":null,"obfuscation":"6jUAlzKXsP"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/main"},"finish_reason":null}],"usage":null,"obfuscation":"xabrunJ"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".go"},"finish_reason":null}],"usage":null,"obfuscation":"tf7MMOxub"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":";"},"finish_reason":null}],"usage":null,"obfuscation":"7vSZSb81vE4"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" github"},"finish_reason":null}],"usage":null,"obfuscation":"623OB"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".com"},"finish_reason":null}],"usage":null,"obfuscation":"XqWhQxrH"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/w"},"finish_reason":null}],"usage":null,"obfuscation":"JToMp67kZl"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"x"},"finish_reason":null}],"usage":null,"obfuscation":"0TEpR4k2c7U"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-che"},"finish_reason":null}],"usage":null,"obfuscation":"oinydvQK"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"val"},"finish_reason":null}],"usage":null,"obfuscation":"E2q45evZv"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"ier"},"finish_reason":null}],"usage":null,"obfuscation":"RQNJj2zey"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"6gglzrcemhh"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Go"},"finish_reason":null}],"usage":null,"obfuscation":"3sVaZInmjs"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-"},"finish_reason":null}],"usage":null,"obfuscation":"dtZc831PkMG"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Notes"},"finish_reason":null}],"usage":null,"obfuscation":"vgtVf4H"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"1STVCRIB2VQ"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"201"},"finish_reason":null}],"usage":null,"obfuscation":"lnnAqDNbp"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"8"},"finish_reason":null}],"usage":null,"obfuscation":"AqYWjDGkAA3"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"~"},"finish_reason":null}],"usage":null,"obfuscation":"nz8yjtCKp67"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"《"},"finish_reason":null}],"usage":null,"obfuscation":"bjUbFw3BTDn"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Learn"},"finish_reason":null}],"usage":null,"obfuscation":"Pop0TFC"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" Go"},"finish_reason":null}],"usage":null,"obfuscation":"7nqbwEwkO"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"》"},"finish_reason":null}],"usage":null,"obfuscation":"hbfwp0dIFZt"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/"},"finish_reason":null}],"usage":null,"obfuscation":"XzWDZc5VtE0"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"02"},"finish_reason":null}],"usage":null,"obfuscation":"ULEnY48Igv"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-write"},"finish_reason":null}],"usage":null,"obfuscation":"ExQwiZ"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-your"},"finish_reason":null}],"usage":null,"obfuscation":"Yh3qXwt"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-first"},"finish_reason":null}],"usage":null,"obfuscation":"V5YWOb"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"-program"},"finish_reason":null}],"usage":null,"obfuscation":"U7z0"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/main"},"finish_reason":null}],"usage":null,"obfuscation":"w8shBW1"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".go"},"finish_reason":null}],"usage":null,"obfuscation":"pzQiPQ5ES"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"\n"},"finish_reason":null}],"usage":null,"obfuscation":"hTLjtopWB1"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"Want"},"finish_reason":null}],"usage":null,"obfuscation":"lltaVLBr"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" me"},"finish_reason":null}],"usage":null,"obfuscation":"4YYT14CHr"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" to"},"finish_reason":null}],"usage":null,"obfuscation":"Na4pWX3lZ"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" narrow"},"finish_reason":null}],"usage":null,"obfuscation":"Ke4mF"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" ("},"finish_reason":null}],"usage":null,"obfuscation":"p3g7NbO73u"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"e"},"finish_reason":null}],"usage":null,"obfuscation":"THv4wPxpcb7"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".g"},"finish_reason":null}],"usage":null,"obfuscation":"la9BzuBvyR"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":".,"},"finish_reason":null}],"usage":null,"obfuscation":"39Yadi7Iyl"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" -"},"finish_reason":null}],"usage":null,"obfuscation":"RN3p8hGLXx"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"file"},"finish_reason":null}],"usage":null,"obfuscation":"SE8oyz6l"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":test"},"finish_reason":null}],"usage":null,"obfuscation":"e3GdWao"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":","},"finish_reason":null}],"usage":null,"obfuscation":"uicHRF8PB0N"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":" repo"},"finish_reason":null}],"usage":null,"obfuscation":"5bKF2eR"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":":"},"finish_reason":null}],"usage":null,"obfuscation":"mOqmIZ1AQhJ"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"org"},"finish_reason":null}],"usage":null,"obfuscation":"lwJNBnrm5"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":"/name"},"finish_reason":null}],"usage":null,"obfuscation":"gMtwD4u"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{"content":")?"},"finish_reason":null}],"usage":null,"obfuscation":"ae3nkWWpUj"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[{"index":0,"delta":{},"finish_reason":"stop"}],"usage":null,"obfuscation":"KQH8XA"}

      data: {"id":"chatcmpl-CLqrSla99T1hnmQc7RDvjpmEJ5k1a","object":"chat.completion.chunk","created":1759324122,"model":"gpt-5-2025-08-07","service_tier":"default","system_fingerprint":null,"choices":[],"usage":{"prompt_tokens":13168,"completion_tokens":759,"total_tokens":13927,"prompt_tokens_details":{"cached_tokens":6528,"audio_tokens":0},"completion_tokens_details":{"reasoning_tokens":640,"audio_tokens":0,"accepted_prediction_tokens":0,"rejected_prediction_tokens":0}},"obfuscation":"bDxgcfI2OeefbJv"}

      data: [DONE]

    headers:
      Content-Type:
      - text/event-stream; charset=utf-8
    status: 200 OK
    code: 200
    duration: 17.08950075s
